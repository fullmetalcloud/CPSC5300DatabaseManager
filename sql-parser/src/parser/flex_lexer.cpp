#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[922] =
    {   0,
      130,  130,    2,    2,  134,  132,    4,    4,  132,  130,
      125,  132,  125,  125,  128,  125,  125,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,  130,    0,  131,    1,  127,
      126,  128,  123,  122,  124,  130,  130,  130,  130,  113,
      130,  130,  114,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  115,  130,  116,  117,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  118,
      119,  120,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  121,  130,
      130,  130,  130,  130,  130,  130,  130,    2,    2,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  126,   99,  130,  100,  130,  130,  101,
      102,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      103,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  104,  130,  130,  130,  130,  130,  130,  105,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  106,  130,  130,  107,  130,  130,  130,  130,  130,

      130,  130,  130,  108,  130,  130,  109,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  110,  130,
      130,  130,  130,  111,  130,  130,  130,  130,  112,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,  130,  130,  130,
      130,  130,   73,  130,   74,  130,  130,  130,  130,   75,
      130,  130,  130,  130,   76,  130,  130,  130,   77,   78,
      130,  130,  130,  130,  130,   79,   80,   81,  130,  130,
       82,  130,   83,  130,  130,  130,  130,  130,  130,   84,
      130,   85,   86,   87,  130,   88,  130,  130,  130,  130,
       89,  130,  130,  130,  130,  130,   90,   91,  130,  130,

      130,  130,  130,  130,  130,   92,  130,  130,  130,  130,
       93,   94,   95,  130,  130,  130,  130,  130,  130,  130,
       96,  130,   97,  130,   98,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   54,   55,  130,  130,  130,   56,
      130,  130,  130,  130,   57,  130,  130,  130,   58,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   59,  130,
      130,  130,   60,   61,  130,  130,  130,  130,   62,   63,
       64,   65,  130,  130,  130,   66,   67,  130,  130,  130,
      130,  130,   68,  130,  130,  130,  130,   69,  130,  130,
      130,   70,  130,  130,  130,   71,  130,  130,   72,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  130,   30,  130,  130,   31,  130,
       32,  130,  130,   33,   34,  130,   35,   36,   37,  130,
       38,  130,   39,   40,  130,   41,   42,  130,  130,   43,
      130,  130,   44,  130,  130,  130,   45,  130,   46,   47,
       48,  130,   49,  130,  130,  130,   50,   51,   52,   53,
      130,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  130,   19,  130,   20,   21,   22,   23,
      130,   24,  130,  130,   25,   26,  130,   27,   28,  130,
      130,  130,   29,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  130,   10,
      130,   11,  130,   12,  130,  130,   13,    2,    2,    2,

        2,    2,    2,    2,    2,    2,  130,    7,  130,    8,
        9,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    6,    5,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[929] =
    {   0,
        0,    0,   65,    0,  361, 4790,  129,  131,    0,    0,
     4790,  353,  349,  346,  126,  125,  342,  122,  122,  130,
      175,  132,  170,  117,  131,  181,  118,  132,  192,  134,
      177,  216,  227,  226,  269,  311,  222,  231,  234,    0,
      219,  257,  346,  368,    0,  342,  340,  336,  381,  250,
      331,  394,  452,  503,  554,  596,  646,  693,  738,  780,
      277,  277,  821,  398,  872,  920,  967,  433, 1010, 1061,
     1106, 1151, 1192,  262,  303,    0,  299, 4790, 4790,  293,
      291,  279, 4790, 4790, 4790,  134,  166,  261,  279,  186,
      285,  185,    0,  313,  359,  309,  222,  233,  390,  386,

      268,  286,  315,  380,  383,  451,  383,  383,  396,  424,
      440,  444,  444,  451,    0,  445,  486,  455,  462,  448,
      469,  496,  509,  458,  474,  474,  491,  501,  514,  511,
        0,  515,  504,  507,  526,  547,  543,  533,  534,  555,
      543,  542,  560,  562,  553,  579,  565,  558,  563,  559,
      595,  605,  602,  600,  609,  608,  596,    0,  297,  268,
      638,  261,    0,    0,  199,  186,  652,    0,    0,    0,
      655,  651,  704, 1243,  720,  690,  756,  739, 1290, 1337,
      783,  791,  818, 1388,  839,  830,  877,  905,  881,  952,
     1431,  968, 1002, 1040, 1052, 1053, 1103, 1478, 1525,  828,

     1111, 1573,  970, 1110, 1112, 1159, 1620, 1671, 1162, 1163,
     1199, 1211, 1229, 1276, 1266, 1215, 1288, 1280, 1325, 1328,
     1373, 1718, 1392, 1434, 1464, 1476, 1474, 1365, 1529, 1528,
     1765, 1516, 1576, 1586, 1563, 1812, 1616, 1629, 1674, 1638,
     1683, 1690, 4790,  184,    0,  614,    0,  619,  613,    0,
        0,  629,  629,  657,  654,  723,  653,  684,  706,  698,
        0,  727,  734,  762,  775,  772,  773,  771,  803,  828,
      840,    0,  862,  873,  885,  877,  891,  900,    0,  894,
      925,  938,  922,  936,  936,  928,  956,  963,  986,  992,
     1019, 1044, 1007, 1053,    0, 1054, 1082, 1103, 1110, 1128,

     1152, 1151, 1152,    0, 1164, 1163, 1170, 1206, 1220, 1232,
     1215, 1216, 1226, 1252, 1236, 1256, 1283, 1294,    0, 1283,
     1300, 1317, 1326,    0, 1331, 1334, 1344, 1355,    0, 1347,
     1420, 1350, 1394, 1387, 1381, 1382, 1398, 1427, 1414,    0,
      153, 1699, 1708, 1722, 1726, 1755, 1751, 1774, 1798, 1828,
     1821, 1850, 1851, 1864, 1873, 1889, 1887, 1903, 1916, 1917,
     1925, 1926, 1955, 1939, 1968, 1977, 1978, 1987, 1990, 2012,
     2020, 2039, 2029, 2057, 2030, 2047, 2074, 2084, 2109, 2081,
     2111, 2134, 2121, 2133, 2146, 2143, 2168, 2170, 2171, 2203,
     2195, 2205, 2213, 2222, 2252, 2235, 2269, 2277, 2270, 2304,

     2287, 2314, 2322, 2338, 2336, 2339, 2371, 2372, 2388, 2375,
     2374, 2404, 2423, 2422, 2431, 2439, 2440, 2441, 2473, 2476,
     2474, 2490, 2492, 2525, 2506, 2524, 2528, 2575, 2557, 2582,
     2553, 2609, 2592, 2600, 1472, 2619, 1428, 1431, 1462, 1470,
     1501, 1506,    0, 1534,    0, 1525, 1525, 1526, 1554,    0,
     1570, 1565, 1570, 1596,    0, 1597, 1620, 1623,    0,    0,
     1623, 1626, 1623, 1632, 1680,    0,    0,    0, 1682, 1669,
        0, 1676,    0, 1677, 1708, 1711, 1722, 1730, 1801,    0,
     1743,    0,    0,    0, 1742,    0, 1753, 1778, 1765, 1794,
        0, 1811, 1826, 1817, 1824, 1847,    0,    0, 1864, 1872,

     1874, 1899, 1907, 1926, 1958,    0, 1969, 1969, 1991, 2012,
        0,    0, 2011, 2028, 2033, 2044, 2083, 2072, 2090, 2102,
        0, 2100,    0, 2119,    0, 2617, 2627, 2644, 2654, 2657,
     2661, 2671, 2679, 2689, 2706, 2716, 2708, 2724, 2733, 2751,
     2760, 2741, 2773, 2763, 2796, 2803, 2810, 2812, 2826, 2839,
     2855, 2848, 2862, 2887, 2871, 2878, 2895, 2920, 2911, 2923,
     2930, 2947, 2960, 2959, 2963, 2977, 2999, 3046, 2987, 3017,
     2995, 3027, 3029, 3056, 3064, 3081, 3078, 3080, 3103, 3113,
     3117, 3125, 3135, 3147, 3157, 3164, 3180, 3182, 3196, 3199,
     3231, 3209, 3239, 3238, 3241, 3248, 3271, 3278, 3290, 3288,

     3307, 3323, 3315, 3342, 3350, 3332, 3359, 3382, 3360, 3389,
     3398, 3407, 3411, 3421,    0,    0, 2118, 2151, 2173,    0,
     2177, 2189, 2190, 2201,    0, 2196, 2231, 2240,    0, 2232,
     2248, 2262, 2274, 2260, 2265, 2285, 2313, 2324,    0, 2374,
     2393, 2395,    0,    0, 2412, 2444, 2457, 2471,    0,    0,
        0,    0, 2507, 2520, 2515,    0,    0, 2535, 2542, 2545,
     2580, 2601,    0, 2656, 2647, 2685, 2696, 2682, 2698, 2704,
     2750,    0, 2798, 2806, 2808,    0, 2807, 2839,    0, 3434,
     3443, 3450, 3446, 3459, 3468, 3478, 3486, 3508, 3510, 3511,
     3533, 3535, 3545, 3547, 3563, 3575, 3572, 3582, 3585, 3599,

     3615, 3632, 3639, 3607, 3649, 3666, 3667, 3668, 3676, 3684,
     3700, 3718, 3716, 3719, 3728, 3735, 3751, 3767, 3770, 3768,
     3780, 3802, 3803, 3812, 3820, 3804, 3837, 3854, 3864, 3855,
     3872, 3889, 3862, 3899, 3906, 3924, 3907, 3916, 3956, 3934,
     3943, 3959, 3968, 3972, 2873,    0, 2870, 2906, 2904, 2918,
        0, 2929, 2914,    0,    0, 2960,    0,    0,    0, 2968,
        0, 3017,    0,    0, 3011,    0,    0, 3021, 3039,    0,
     3044, 3087,    0, 3071, 3108, 3110,    0, 3170, 3161,    0,
        0, 3180,    0, 3193, 3221, 3219,    0,    0,    0,    0,
     3259, 3986, 3995, 4008, 3996, 4024, 4033, 4031, 4047, 4060,

     4061, 4063, 4096, 4095, 4097, 4098, 4099, 4131, 4147, 4133,
     4134, 4135, 4163, 4170, 4171, 4187, 4199, 4215, 4224, 4206,
     4223, 4242, 4251, 4258, 4274, 4267, 4260, 4276, 4303, 4311,
     4325, 4328, 4312, 4341, 4355, 4363, 4364, 4365,    0,    0,
        0,    0,    0, 3273,    0, 3261,    0,    0,    0,    0,
     3285,    0, 3286, 3318,    0,    0, 3305,    0,    0, 3332,
     3347, 3367,    0, 4373, 4377, 4400, 4402, 4412, 4425, 4416,
     4424, 4434, 4452, 4459, 4461, 4484, 4468, 4477, 4486, 4511,
     4513, 4520, 4521, 4529, 4538, 4548, 4545, 4572, 3375,    0,
     3379,    0, 3386,    0, 3383, 3401,    0, 4573, 4580, 4581,

     4590, 4615, 4597, 4624, 4637, 4625, 3419,    0, 3441,    0,
        0, 4647, 4649, 4672, 4676, 4679,    0,    0, 4689, 4701,
     4790, 4765,  139, 4769, 4773, 4777, 4781, 4785
    } ;

static yyconst flex_int16_t yy_def[929] =
    {   0,
      921,    1,  921,    3,  921,  921,  921,  921,  922,  923,
      921,  924,  921,  921,  923,  921,  921,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  925,
      925,  921,  926,  927,  925,  928,  925,  925,  927,  925,
      925,  927,  927,   53,   54,   52,   54,   54,   54,   52,
       54,   53,   53,   53,   54,   54,   54,   53,   53,   54,
       54,   54,   53,  921,  922,  923,  924,  921,  921,  921,
      921,  923,  921,  921,  921,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  925,  925,  926,
       53,  928,  925,  925,  925,  925,   53,  925,  925,  925,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   54,   54,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  921,  921,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  925,
      925,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   66,   53,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  923,  923,
      923,  923,  923,  923,  923,  923,  923,   53,   53,   53,

       53,   53,   53,   53,   53,   53,  923,  923,  923,  923,
      923,   53,   53,   53,   53,   53,  923,  923,   53,   53,
        0,  921,  921,  921,  921,  921,  921,  921
    } ;

static yyconst flex_int16_t yy_nxt[4856] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   10,
       34,   35,   36,   37,   38,   39,   10,   10,   10,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   10,   34,   35,   36,   37,
       38,   39,   10,   10,   10,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   45,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   44,   68,   69,   70,   71,   72,

       73,   44,   44,   44,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       44,   68,   69,   70,   71,   72,   73,   44,   44,   44,
       74,   74,   74,   74,   81,   82,   83,   84,   86,   91,
       87,  111,   76,   94,  113,  119,   88,  112,   89,  120,
      245,  124,  114,   90,   92,  125,  103,   95,  104,   93,
       96,   97,  341,  105,   86,   91,   87,  111,  106,   94,
      113,  119,   88,  112,   89,  120,  245,  124,  114,   90,
       92,  125,  103,   95,  104,   93,   96,   97,   98,  105,
      126,  107,   99,  244,  106,  341,  100,  108,  246,  115,

      109,  251,  101,  110,  127,  102,  116,  117,  165,  121,
      128,  129,  118,  122,   98,  254,  126,  107,   99,  123,
      159,   74,  100,  108,  246,  115,  109,  251,  101,  110,
      127,  102,  116,  117,  130,  121,  128,  129,  118,  122,
      134,  254,  131,  137,  154,  123,  132,  138,  151,  133,
      152,  135,  155,  153,  156,  157,  261,  136,   74,   74,
      130,  168,  169,   74,   74,  262,  134,  163,  131,  137,
      154,  340,  132,  138,  151,  133,  152,  135,  155,  153,
      156,  157,  261,  136,  139,  247,  140,   81,   82,  141,
      161,  262,  249,  248,  205,  250,  142,  143,  159,   74,

      244,  269,   80,  252,  204,   78,  243,  161,  161,  161,
      139,  247,  140,  270,  161,  141,  161,  253,  249,  248,
      205,  250,  142,  143,  144,  145,  259,  269,  146,  252,
      204,  147,  148,  161,  161,  161,  260,  255,  149,  270,
      161,  150,  170,  253,  256,  165,  271,  164,  163,  158,
      144,  145,  259,   85,  146,   80,   79,  147,  148,   78,
      921,  921,  260,  255,  149,  921,  921,  150,  158,  158,
      256,  158,  271,  158,  158,  158,  158,  921,  158,  158,
      158,  158,  158,  257,  158,  258,  158,  158,  158,  166,
      167,  158,  158,  158,  158,  158,  272,  158,  273,  158,

      158,  158,  158,  263,  158,  158,  158,  278,  264,  257,
      171,  258,  172,  279,  265,  209,  267,  268,  173,  210,
      174,  266,  272,  280,  273,  175,  921,  921,  921,  263,
      161,  921,  921,  278,  264,  161,  171,  921,  172,  279,
      265,  209,  267,  268,  173,  210,  174,  266,  281,  280,
      222,  175,  158,  158,  223,  158,  161,  158,  158,  158,
      158,  161,  158,  158,  158,  161,  274,  282,  275,  176,
      161,  283,  276,  288,  281,  284,  222,  286,  285,  277,
      223,  293,  287,  294,  177,  295,  921,  296,  301,  178,
      921,  161,  274,  282,  275,  176,  161,  283,  276,  288,

      302,  284,  289,  286,  285,  277,  303,  293,  287,  294,
      177,  295,  290,  296,  301,  178,  179,  291,  292,  297,
      161,  298,  299,  304,  300,  305,  302,  306,  289,  307,
      180,  308,  303,  181,  182,  161,  309,  310,  290,  311,
      161,  921,  179,  291,  292,  297,  161,  298,  299,  304,
      300,  305,  316,  306,  317,  307,  180,  308,  921,  181,
      182,  161,  309,  310,  312,  311,  161,  183,  313,  314,
      320,  184,  321,  322,  315,  185,  323,  324,  316,  318,
      317,  186,  327,  328,  187,  161,  921,  319,  921,  921,
      312,  329,  330,  183,  313,  314,  320,  184,  321,  322,

      315,  185,  323,  324,  325,  318,  921,  186,  327,  328,
      187,  161,  161,  319,  161,  326,  331,  329,  330,  332,
      188,  333,  189,  334,  335,  338,  336,  190,  339,  921,
      325,  437,  191,  921,  921,  921,  438,  439,  161,  337,
      161,  326,  331,  921,  921,  332,  188,  333,  189,  334,
      335,  338,  336,  190,  339,  161,  440,  437,  191,  161,
      166,  167,  438,  439,  441,  337,  921,  192,  161,  161,
      161,  342,  161,  193,  442,  161,  194,  161,  443,  195,
      921,  161,  440,  343,  161,  161,  446,  161,  161,  161,
      441,  921,  161,  192,  161,  161,  161,  342,  161,  193,

      442,  161,  194,  161,  443,  195,  161,  161,  349,  343,
      161,  921,  446,  161,  161,  161,  447,  196,  161,  448,
      161,  161,  350,  197,  161,  921,  921,  161,  344,  449,
      921,  921,  161,  161,  349,  348,  345,  161,  444,  921,
      445,  161,  447,  196,  450,  448,  161,  161,  350,  197,
      161,  198,  161,  161,  344,  449,  161,  161,  451,  199,
      921,  348,  345,  161,  444,  161,  445,  161,  161,  161,
      450,  161,  921,  161,  921,  452,  161,  198,  161,  921,
      921,  921,  161,  161,  451,  199,  351,  455,  161,  921,
      456,  161,  453,  161,  161,  161,  161,  161,  200,  161,

      356,  452,  161,  457,  161,  201,  202,  454,  161,  921,
      357,  203,  351,  455,  161,  161,  456,  458,  453,  161,
      161,  921,  161,  161,  200,  358,  356,  921,  161,  457,
      161,  201,  202,  454,  161,  161,  357,  203,  206,  921,
      921,  161,  207,  458,  921,  161,  161,  161,  208,  161,
      359,  358,  161,  161,  161,  161,  459,  460,  161,  921,
      161,  161,  161,  366,  206,  161,  161,  161,  207,  364,
      365,  161,  921,  161,  208,  461,  359,  921,  161,  161,
      921,  161,  459,  460,  161,  211,  161,  921,  161,  366,
      462,  161,  161,  161,  161,  364,  365,  369,  161,  212,

      463,  461,  161,  161,  367,  213,  214,  921,  464,  161,
      921,  211,  921,  161,  161,  465,  462,  466,  161,  467,
      161,  921,  161,  369,  161,  212,  463,  921,  161,  161,
      367,  213,  214,  161,  464,  161,  368,  161,  215,  161,
      161,  465,  161,  466,  161,  467,  216,  161,  161,  468,
      217,  161,  469,  218,  921,  470,  471,  472,  921,  161,
      473,  921,  368,  161,  215,  921,  921,  370,  161,  161,
      921,  921,  216,  161,  921,  468,  217,  161,  469,  218,
      219,  470,  471,  472,  161,  161,  473,  161,  474,  161,
      475,  220,  375,  370,  161,  161,  390,  221,  161,  921,

      161,  921,  161,  476,  921,  161,  219,  161,  921,  477,
      161,  161,  921,  161,  474,  161,  475,  220,  375,  161,
      161,  921,  390,  221,  161,  224,  161,  225,  161,  476,
      226,  161,  376,  161,  161,  477,  478,  227,  228,  161,
      481,  921,  161,  921,  921,  161,  921,  161,  921,  921,
      921,  224,  921,  225,  921,  921,  226,  161,  376,  921,
      161,  479,  478,  227,  228,  161,  481,  377,  161,  161,
      161,  480,  161,  161,  229,  230,  378,  161,  231,  482,
      379,  232,  233,  161,  161,  161,  483,  479,  234,  161,
      161,  235,  161,  377,  921,  161,  161,  480,  161,  484,

      229,  230,  378,  161,  231,  482,  379,  232,  233,  921,
      161,  161,  483,  921,  234,  161,  161,  235,  161,  161,
      161,  921,  921,  921,  485,  484,  486,  161,  161,  161,
      380,  391,  236,  161,  237,  161,  161,  238,  921,  385,
      161,  487,  161,  161,  161,  161,  161,  161,  161,  392,
      485,  921,  486,  161,  161,  161,  380,  391,  236,  161,
      237,  161,  161,  238,  239,  385,  161,  487,  161,  161,
      161,  488,  240,  161,  161,  392,  161,  393,  161,  161,
      161,  161,  161,  921,  489,  490,  921,  921,  491,  399,
      239,  161,  398,  492,  161,  161,  161,  488,  240,  161,

      161,  493,  161,  393,  161,  161,  161,  161,  161,  161,
      489,  490,  241,  242,  491,  399,  161,  161,  398,  492,
      161,  161,  161,  494,  161,  161,  161,  493,  161,  161,
      921,  400,  161,  921,  921,  161,  161,  495,  241,  242,
      921,  498,  161,  401,  499,  496,  161,  161,  161,  494,
      161,  500,  161,  402,  161,  161,  346,  400,  161,  347,
      161,  161,  161,  495,  497,  501,  161,  498,  502,  401,
      499,  496,  161,  161,  161,  161,  503,  500,  161,  402,
      161,  921,  346,  161,  404,  347,  161,  161,  921,  403,
      497,  501,  161,  161,  502,  921,  921,  161,  161,  921,

      504,  161,  503,  161,  405,  161,  161,  161,  161,  161,
      404,  505,  406,  161,  352,  403,  921,  161,  506,  161,
      161,  353,  161,  161,  161,  161,  504,  161,  921,  161,
      405,  161,  507,  161,  161,  921,  921,  505,  406,  161,
      352,  408,  161,  161,  506,  161,  161,  353,  161,  508,
      509,  161,  921,  161,  161,  407,  921,  161,  507,  510,
      161,  354,  161,  355,  921,  161,  511,  408,  161,  161,
      512,  161,  513,  514,  161,  508,  509,  517,  419,  921,
      161,  407,  161,  161,  921,  510,  161,  354,  161,  355,
      409,  161,  511,  921,  410,  161,  512,  161,  513,  514,

      161,  360,  161,  517,  419,  161,  361,  518,  161,  161,
      161,  413,  362,  519,  520,  161,  409,  521,  161,  363,
      410,  921,  921,  161,  161,  921,  921,  360,  161,  161,
      522,  161,  361,  518,  525,  161,  161,  413,  362,  519,
      520,  161,  921,  521,  161,  363,  371,  515,  372,  516,
      161,  161,  373,  523,  414,  161,  522,  524,  615,  374,
      525,  616,  921,  161,  921,  921,  161,  921,  161,  921,
      921,  161,  371,  515,  372,  516,  921,  161,  373,  523,
      414,  161,  921,  524,  615,  374,  921,  616,  415,  161,
      161,  161,  161,  161,  161,  161,  416,  161,  612,  617,

      618,  161,  613,  417,  418,  161,  161,  161,  161,  381,
      161,  161,  382,  161,  415,  161,  161,  161,  619,  161,
      921,  161,  416,  620,  612,  617,  618,  161,  613,  417,
      418,  161,  161,  424,  161,  381,  161,  161,  382,  161,
      921,  161,  161,  420,  619,  161,  161,  621,  161,  620,
      622,  383,  421,  161,  921,  623,  384,  161,  624,  424,
      161,  161,  161,  921,  921,  161,  161,  921,  161,  420,
      921,  161,  161,  621,  161,  921,  622,  383,  421,  161,
      161,  623,  384,  161,  624,  625,  161,  161,  161,  386,
      161,  161,  161,  161,  626,  161,  427,  921,  627,  387,

      161,  425,  628,  161,  388,  389,  161,  921,  161,  629,
      161,  625,  630,  161,  426,  386,  161,  921,  161,  161,
      626,  161,  427,  161,  627,  387,  161,  425,  628,  161,
      388,  389,  430,  161,  161,  629,  161,  161,  630,  161,
      426,  631,  921,  394,  161,  395,  161,  632,  161,  161,
      431,  633,  161,  161,  634,  433,  635,  161,  430,  161,
      921,  161,  921,  161,  636,  921,  161,  631,  434,  394,
      161,  395,  161,  632,  161,  161,  431,  633,  161,  161,
      634,  433,  635,  161,  396,  921,  397,  161,  161,  921,
      636,  161,  161,  637,  434,  638,  161,  639,  432,  921,

      435,  161,  640,  161,  641,  921,  161,  161,  161,  921,
      396,  161,  397,  921,  161,  161,  161,  161,  921,  637,
      161,  638,  436,  639,  432,  526,  435,  161,  640,  161,
      641,  161,  161,  161,  161,  161,  161,  161,  642,  161,
      161,  161,  161,  527,  411,  161,  161,  643,  436,  412,
      161,  526,  644,  161,  161,  161,  921,  161,  161,  161,
      645,  161,  161,  161,  642,  161,  161,  648,  161,  527,
      411,  161,  161,  643,  649,  412,  161,  650,  644,  528,
      161,  161,  161,  161,  161,  161,  645,  161,  161,  161,
      422,  161,  161,  648,  161,  651,  652,  161,  161,  921,

      649,  423,  161,  650,  921,  528,  161,  921,  161,  161,
      921,  161,  921,  161,  161,  161,  422,  161,  161,  921,
      646,  651,  652,  161,  653,  529,  654,  423,  161,  161,
      161,  647,  161,  428,  921,  161,  429,  161,  531,  921,
      921,  161,  921,  655,  161,  161,  646,  656,  921,  161,
      653,  529,  654,  161,  657,  161,  161,  647,  161,  428,
      161,  161,  429,  530,  531,  161,  533,  161,  534,  655,
      161,  161,  658,  656,  532,  161,  921,  659,  921,  161,
      657,  161,  161,  161,  161,  660,  161,  161,  161,  530,
      161,  161,  533,  161,  534,  921,  161,  535,  658,  661,

      532,  161,  537,  659,  161,  536,  161,  161,  161,  161,
      161,  660,  921,  161,  161,  921,  161,  921,  538,  161,
      161,  161,  161,  535,  161,  661,  161,  161,  537,  662,
      161,  536,  161,  539,  161,  161,  161,  921,  541,  663,
      161,  540,  161,  542,  538,  161,  161,  161,  161,  161,
      161,  664,  161,  161,  161,  662,  545,  161,  543,  539,
      161,  161,  161,  161,  541,  663,  161,  540,  161,  542,
      544,  161,  161,  665,  161,  161,  161,  664,  921,  161,
      161,  921,  545,  161,  543,  161,  666,  161,  161,  161,
      667,  547,  161,  921,  161,  161,  544,  161,  161,  665,

      546,  921,  161,  921,  549,  161,  548,  161,  668,  161,
      161,  161,  666,  161,  161,  161,  667,  547,  161,  161,
      161,  161,  161,  921,  161,  550,  546,  161,  921,  161,
      549,  161,  548,  161,  668,  161,  161,  551,  921,  669,
      161,  161,  670,  671,  161,  161,  161,  555,  161,  161,
      161,  550,  161,  161,  552,  161,  161,  161,  921,  672,
      553,  161,  161,  551,  161,  669,  161,  161,  670,  671,
      161,  161,  161,  555,  161,  161,  161,  673,  161,  161,
      552,  554,  161,  161,  161,  672,  553,  161,  161,  161,
      161,  161,  161,  161,  161,  921,  674,  161,  161,  556,

      161,  161,  161,  673,  675,  161,  161,  554,  557,  676,
      161,  161,  921,  161,  559,  161,  161,  161,  161,  677,
      161,  161,  674,  558,  161,  556,  161,  161,  161,  921,
      675,  560,  161,  678,  557,  676,  679,  161,  161,  161,
      559,  161,  161,  161,  161,  677,  161,  161,  161,  558,
      161,  161,  161,  562,  161,  561,  745,  560,  161,  678,
      565,  921,  679,  161,  161,  563,  161,  161,  746,  161,
      161,  161,  161,  564,  161,  161,  161,  161,  161,  562,
      161,  561,  745,  161,  161,  566,  565,  567,  568,  161,
      747,  563,  161,  748,  746,  921,  161,  161,  569,  564,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      921,  566,  161,  567,  568,  749,  747,  750,  751,  748,
      161,  571,  161,  752,  569,  921,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  570,  161,  161,  573,
      161,  749,  161,  750,  751,  572,  161,  571,  161,  752,
      161,  575,  161,  161,  161,  753,  161,  754,  161,  161,
      921,  161,  570,  161,  755,  573,  161,  161,  161,  161,
      921,  572,  161,  574,  756,  921,  161,  575,  161,  757,
      161,  753,  576,  754,  161,  161,  161,  161,  921,  161,
      755,  758,  759,  161,  161,  161,  577,  760,  161,  574,

      756,  161,  161,  578,  161,  757,  161,  161,  576,  161,
      161,  921,  161,  161,  161,  161,  761,  758,  759,  161,
      161,  161,  577,  760,  161,  921,  921,  161,  161,  578,
      161,  161,  161,  161,  762,  161,  161,  579,  580,  161,
      161,  161,  761,  921,  921,  161,  161,  161,  763,  921,
      161,  161,  581,  583,  161,  161,  584,  161,  921,  161,
      762,  921,  161,  579,  580,  161,  921,  161,  161,  582,
      161,  161,  161,  161,  763,  161,  161,  161,  581,  583,
      161,  161,  584,  921,  585,  161,  921,  590,  161,  161,
      921,  161,  161,  764,  161,  582,  161,  161,  587,  161,

      589,  161,  161,  586,  161,  161,  161,  161,  161,  161,
      585,  161,  161,  590,  161,  161,  588,  161,  161,  764,
      161,  161,  921,  765,  587,  161,  589,  766,  921,  586,
      161,  161,  161,  161,  161,  161,  591,  161,  161,  593,
      161,  161,  588,  592,  767,  921,  161,  161,  594,  765,
      921,  161,  921,  766,  161,  161,  161,  161,  161,  161,
      161,  768,  591,  161,  921,  593,  161,  161,  161,  592,
      767,  161,  161,  596,  594,  595,  161,  161,  161,  921,
      161,  161,  161,  161,  161,  161,  161,  768,  769,  161,
      161,  161,  921,  161,  161,  770,  921,  161,  161,  596,

      598,  595,  161,  161,  161,  597,  161,  161,  161,  161,
      161,  161,  921,  161,  769,  921,  161,  161,  599,  161,
      771,  770,  161,  602,  600,  921,  598,  161,  921,  161,
      921,  597,  161,  161,  161,  161,  161,  161,  161,  161,
      772,  161,  161,  161,  599,  161,  771,  773,  161,  602,
      600,  601,  774,  161,  603,  161,  161,  161,  921,  921,
      161,  161,  161,  921,  161,  161,  772,  161,  161,  161,
      161,  161,  775,  773,  161,  776,  921,  601,  774,  608,
      603,  921,  161,  161,  606,  161,  161,  161,  161,  161,
      161,  161,  161,  921,  161,  607,  161,  777,  775,  161,

      161,  776,  604,  921,  605,  608,  921,  161,  921,  161,
      606,  161,  161,  921,  161,  161,  161,  161,  161,  161,
      161,  607,  778,  777,  161,  161,  161,  610,  604,  161,
      605,  921,  611,  161,  161,  161,  161,  161,  161,  614,
      161,  161,  609,  161,  161,  161,  161,  680,  778,  161,
      161,  161,  161,  610,  161,  161,  161,  681,  611,  161,
      161,  161,  161,  161,  161,  614,  921,  161,  609,  779,
      161,  161,  161,  680,  684,  161,  161,  161,  685,  780,
      161,  682,  161,  681,  683,  161,  161,  161,  161,  161,
      161,  161,  686,  161,  161,  779,  161,  161,  161,  921,

      684,  781,  161,  161,  685,  780,  161,  682,  161,  782,
      683,  161,  161,  783,  161,  161,  161,  161,  686,  161,
      161,  161,  161,  161,  161,  161,  161,  781,  784,  161,
      921,  687,  161,  161,  161,  782,  785,  161,  161,  783,
      689,  161,  161,  161,  921,  161,  688,  161,  161,  161,
      161,  161,  161,  161,  784,  690,  161,  687,  161,  161,
      921,  161,  785,  786,  161,  161,  689,  161,  161,  161,
      161,  161,  688,  693,  161,  691,  161,  161,  161,  161,
      161,  690,  161,  161,  161,  921,  694,  161,  161,  786,
      161,  161,  161,  692,  161,  161,  161,  161,  921,  693,

      161,  691,  921,  161,  161,  161,  161,  921,  921,  161,
      161,  695,  694,  161,  161,  787,  161,  921,  161,  692,
      161,  161,  788,  161,  696,  789,  161,  161,  161,  161,
      921,  161,  921,  161,  697,  161,  161,  695,  790,  161,
      161,  787,  161,  161,  161,  921,  161,  161,  788,  161,
      696,  789,  791,  161,  161,  161,  161,  921,  161,  161,
      697,  161,  921,  161,  790,  161,  161,  698,  161,  161,
      161,  161,  161,  161,  921,  161,  161,  921,  791,  161,
      161,  700,  161,  699,  161,  161,  921,  161,  161,  161,
      839,  161,  161,  698,  701,  161,  840,  161,  161,  161,

      702,  921,  161,  161,  161,  161,  161,  700,  161,  699,
      161,  161,  161,  161,  161,  161,  839,  921,  161,  161,
      701,  161,  840,  841,  161,  161,  702,  161,  161,  161,
      161,  921,  161,  703,  161,  842,  161,  161,  161,  704,
      161,  161,  843,  161,  844,  161,  845,  161,  161,  841,
      161,  921,  161,  161,  161,  161,  705,  161,  161,  703,
      161,  842,  161,  161,  161,  704,  161,  161,  843,  161,
      844,  921,  845,  161,  161,  846,  161,  161,  161,  161,
      161,  161,  705,  161,  161,  847,  161,  706,  161,  707,
      161,  161,  161,  161,  161,  161,  161,  161,  921,  708,

      161,  846,  161,  161,  161,  161,  161,  709,  921,  161,
      161,  847,  161,  706,  161,  707,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  708,  161,  161,  921,  710,
      161,  161,  161,  709,  161,  161,  161,  921,  161,  921,
      161,  713,  161,  848,  161,  161,  161,  921,  849,  161,
      161,  850,  921,  161,  161,  710,  851,  161,  161,  161,
      161,  161,  161,  161,  161,  711,  161,  713,  852,  848,
      161,  921,  161,  161,  849,  161,  712,  850,  161,  921,
      161,  161,  851,  161,  921,  161,  921,  161,  714,  161,
      161,  711,  161,  161,  852,  716,  161,  161,  161,  161,

      853,  161,  712,  854,  161,  715,  921,  161,  921,  161,
      161,  717,  161,  161,  714,  161,  921,  161,  161,  161,
      161,  716,  161,  161,  161,  855,  853,  161,  921,  854,
      161,  715,  719,  718,  161,  161,  161,  717,  161,  161,
      161,  161,  720,  161,  161,  161,  161,  856,  921,  161,
      161,  855,  161,  921,  161,  921,  161,  161,  719,  718,
      161,  161,  161,  921,  161,  721,  161,  161,  720,  921,
      921,  161,  161,  856,  161,  161,  161,  722,  161,  161,
      161,  161,  723,  161,  161,  857,  921,  921,  161,  161,
      161,  721,  858,  161,  161,  724,  161,  161,  161,  161,

      161,  161,  921,  722,  859,  161,  860,  161,  723,  725,
      161,  857,  161,  161,  161,  161,  161,  161,  858,  161,
      161,  724,  161,  161,  726,  161,  161,  161,  161,  921,
      859,  161,  860,  161,  861,  725,  161,  921,  161,  161,
      161,  728,  161,  161,  921,  161,  161,  921,  161,  921,
      726,  862,  161,  730,  161,  161,  161,  161,  161,  161,
      861,  727,  161,  161,  729,  731,  921,  728,  161,  921,
      161,  161,  161,  161,  161,  161,  161,  862,  161,  730,
      161,  161,  161,  863,  161,  161,  889,  727,  161,  161,
      729,  731,  732,  890,  161,  733,  161,  161,  921,  161,

      891,  161,  161,  161,  161,  161,  161,  161,  161,  863,
      161,  161,  889,  921,  161,  161,  892,  734,  732,  890,
      161,  733,  161,  921,  161,  161,  891,  161,  921,  161,
      736,  161,  161,  161,  161,  893,  161,  894,  921,  161,
      161,  161,  892,  734,  161,  739,  161,  161,  161,  161,
      161,  161,  161,  161,  735,  161,  736,  921,  161,  161,
      161,  893,  895,  894,  161,  161,  161,  161,  737,  161,
      161,  739,  896,  161,  161,  161,  161,  742,  161,  161,
      735,  161,  161,  738,  897,  161,  161,  161,  895,  921,
      161,  740,  161,  161,  737,  161,  161,  161,  896,  161,

      161,  741,  161,  742,  921,  161,  161,  907,  161,  738,
      897,  908,  921,  161,  161,  161,  909,  740,  161,  161,
      910,  161,  161,  161,  161,  161,  161,  741,  744,  911,
      161,  743,  161,  907,  921,  161,  917,  908,  161,  161,
      161,  161,  909,  161,  161,  161,  910,  161,  161,  921,
      161,  161,  161,  161,  744,  911,  161,  743,  161,  921,
      161,  161,  917,  793,  161,  161,  161,  161,  921,  161,
      161,  161,  918,  921,  161,  161,  794,  161,  161,  161,
      161,  921,  161,  161,  161,  161,  161,  161,  792,  793,
      921,  161,  161,  161,  795,  161,  161,  161,  918,  921,

      161,  161,  794,  161,  161,  161,  161,  921,  161,  161,
      161,  161,  796,  161,  792,  161,  921,  161,  161,  921,
      795,  161,  161,  161,  921,  161,  161,  798,  161,  161,
      921,  161,  921,  921,  921,  797,  161,  921,  796,  921,
      161,  161,  161,  161,  161,  161,  921,  161,  161,  161,
      161,  161,  161,  798,  161,  921,  921,  921,  921,  800,
      799,  797,  801,  921,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  921,  161,  161,  161,  161,
      161,  921,  161,  921,  161,  800,  799,  921,  801,  804,
      161,  161,  161,  161,  921,  802,  161,  921,  161,  805,

      161,  803,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  921,  161,  921,  161,  804,  161,  806,  161,  161,
      921,  802,  161,  921,  161,  805,  161,  803,  161,  921,
      161,  807,  161,  161,  921,  161,  161,  921,  161,  161,
      161,  921,  161,  806,  161,  161,  808,  161,  161,  161,
      161,  921,  161,  809,  921,  921,  161,  807,  161,  921,
      921,  921,  161,  810,  161,  161,  161,  921,  811,  161,
      161,  161,  808,  161,  921,  161,  161,  921,  161,  809,
      921,  161,  161,  161,  161,  161,  161,  921,  921,  810,
      161,  921,  161,  161,  811,  161,  812,  161,  161,  813,

      161,  161,  161,  161,  161,  161,  921,  161,  161,  161,
      161,  161,  161,  161,  921,  921,  814,  815,  921,  161,
      921,  161,  812,  921,  161,  813,  161,  161,  921,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  921,  161,
      817,  921,  814,  815,  921,  161,  921,  161,  161,  816,
      161,  161,  161,  161,  921,  161,  161,  921,  161,  161,
      161,  161,  161,  161,  921,  161,  817,  161,  161,  921,
      921,  161,  161,  921,  161,  816,  161,  161,  161,  161,
      818,  161,  161,  161,  161,  161,  161,  161,  161,  921,
      819,  161,  921,  161,  161,  921,  921,  161,  161,  161,

      820,  921,  161,  921,  161,  161,  818,  161,  921,  161,
      161,  161,  161,  161,  161,  921,  819,  161,  921,  161,
      821,  824,  921,  161,  921,  161,  820,  921,  161,  161,
      161,  161,  921,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  822,  161,  161,  161,  821,  824,  921,  161,
      823,  921,  161,  921,  161,  161,  921,  161,  825,  921,
      161,  161,  161,  161,  921,  161,  161,  161,  822,  161,
      161,  161,  161,  921,  161,  161,  823,  826,  161,  161,
      161,  161,  921,  161,  825,  921,  161,  827,  828,  161,
      921,  161,  161,  830,  161,  161,  161,  161,  161,  161,

      161,  161,  829,  826,  161,  161,  161,  161,  921,  161,
      921,  921,  161,  827,  828,  161,  161,  161,  161,  830,
      161,  161,  161,  161,  161,  161,  161,  161,  829,  831,
      161,  161,  161,  834,  921,  161,  161,  833,  832,  161,
      921,  161,  161,  161,  161,  921,  921,  161,  161,  161,
      161,  836,  161,  161,  921,  831,  161,  161,  921,  834,
      161,  161,  161,  833,  832,  161,  161,  161,  921,  161,
      161,  161,  835,  161,  161,  161,  161,  836,  921,  161,
      161,  838,  161,  921,  921,  161,  161,  161,  161,  161,
      837,  161,  161,  161,  921,  921,  161,  161,  835,  161,

      161,  161,  161,  864,  161,  161,  161,  838,  921,  161,
      921,  161,  161,  866,  161,  161,  837,  161,  161,  161,
      921,  921,  161,  161,  921,  161,  161,  161,  161,  864,
      161,  161,  161,  161,  865,  161,  921,  921,  161,  866,
      161,  161,  921,  921,  161,  161,  921,  921,  161,  161,
      161,  161,  921,  161,  161,  867,  161,  868,  161,  161,
      865,  161,  869,  161,  161,  161,  161,  161,  161,  921,
      161,  161,  921,  921,  161,  921,  161,  161,  161,  161,
      161,  867,  161,  868,  161,  921,  921,  161,  869,  161,
      161,  161,  870,  161,  161,  161,  161,  161,  161,  921,

      161,  921,  921,  161,  161,  161,  161,  921,  921,  921,
      161,  871,  161,  161,  161,  161,  872,  921,  870,  161,
      921,  161,  921,  161,  161,  921,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  871,  161,  161,
      161,  161,  872,  921,  921,  921,  921,  921,  161,  921,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  921,
      161,  161,  874,  873,  161,  921,  161,  161,  161,  161,
      161,  921,  921,  921,  161,  921,  921,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  874,  873,

      161,  875,  161,  161,  876,  161,  161,  161,  161,  921,
      161,  921,  921,  161,  161,  921,  161,  921,  921,  161,
      921,  161,  921,  161,  161,  921,  161,  875,  161,  161,
      876,  161,  161,  161,  161,  921,  161,  878,  161,  877,
      161,  161,  161,  161,  921,  161,  921,  161,  921,  161,
      161,  921,  161,  921,  921,  879,  161,  161,  161,  880,
      161,  161,  161,  878,  161,  877,  161,  161,  161,  161,
      921,  921,  921,  161,  161,  161,  921,  161,  161,  161,
      921,  879,  161,  161,  161,  880,  161,  161,  881,  882,
      161,  161,  161,  161,  161,  161,  921,  161,  883,  161,

      161,  161,  921,  161,  161,  161,  161,  921,  161,  161,
      161,  161,  921,  161,  881,  882,  161,  161,  161,  161,
      161,  161,  921,  161,  883,  161,  921,  884,  161,  161,
      161,  921,  161,  921,  161,  161,  921,  161,  885,  161,
      161,  886,  161,  161,  887,  161,  161,  921,  161,  161,
      921,  921,  921,  884,  161,  161,  921,  161,  161,  921,
      161,  161,  161,  921,  885,  161,  161,  886,  161,  161,
      887,  161,  161,  161,  161,  161,  921,  921,  161,  921,
      161,  161,  161,  161,  161,  921,  161,  161,  161,  888,
      161,  161,  161,  921,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  921,  161,  161,  161,  161,  161,  161,
      161,  921,  921,  161,  161,  888,  161,  161,  161,  161,
      161,  161,  161,  161,  921,  921,  161,  161,  161,  161,
      921,  161,  161,  161,  161,  161,  161,  161,  898,  161,
      161,  161,  161,  161,  161,  161,  921,  921,  161,  161,
      921,  161,  921,  161,  921,  161,  899,  161,  161,  161,
      161,  161,  161,  161,  898,  161,  161,  161,  161,  161,
      161,  161,  921,  921,  161,  161,  161,  161,  161,  161,
      921,  921,  899,  161,  161,  161,  921,  161,  161,  161,
      921,  161,  161,  161,  161,  161,  161,  161,  161,  900,

      161,  161,  161,  902,  161,  161,  921,  901,  921,  161,
      161,  161,  921,  921,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  900,  161,  161,  161,  902,
      161,  161,  921,  901,  921,  161,  921,  161,  161,  921,
      161,  921,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  921,  903,  161,  161,  161,  161,  161,  161,  921,
      921,  161,  906,  161,  161,  161,  161,  921,  904,  161,
      161,  161,  161,  905,  161,  161,  161,  161,  903,  161,
      161,  161,  161,  161,  161,  161,  921,  161,  906,  161,
      161,  161,  161,  921,  904,  921,  161,  161,  161,  905,

      921,  161,  921,  161,  161,  912,  161,  161,  161,  161,
      161,  161,  161,  913,  161,  161,  161,  161,  161,  921,
      921,  921,  161,  161,  161,  921,  921,  161,  921,  161,
      161,  912,  161,  161,  161,  161,  161,  921,  161,  913,
      161,  161,  161,  161,  161,  914,  921,  161,  161,  921,
      921,  921,  161,  161,  161,  161,  161,  161,  161,  921,
      161,  915,  161,  921,  919,  916,  161,  161,  161,  161,
      921,  914,  921,  161,  161,  921,  921,  921,  161,  161,
      161,  161,  161,  161,  161,  921,  161,  915,  161,  161,
      919,  916,  161,  161,  921,  161,  161,  921,  921,  921,

      161,  921,  921,  920,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  921,  161,  161,  921,  161,  161,
      921,  161,  161,  921,  921,  921,  161,  921,  921,  920,
      161,  921,  161,  161,  161,  161,  921,  161,  161,  161,
      921,  921,  161,  921,  161,  921,  921,  161,  921,  921,
      921,  921,  161,  921,  921,  921,  921,  921,  921,  161,
      921,  921,  921,  921,  161,   75,  921,  921,   75,   77,
      921,   77,   77,  158,  921,  158,  158,  160,  921,  160,
      160,  161,  921,  161,  161,  162,  921,  162,  162,    5,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,

      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921
    } ;

static yyconst flex_int16_t yy_chk[4856] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   15,   15,   16,   16,   18,   19,
       18,   24,  923,   20,   25,   27,   18,   24,   18,   28,
       86,   30,   25,   18,   19,   30,   22,   20,   22,   19,
       20,   20,  341,   22,   18,   19,   18,   24,   22,   20,
       25,   27,   18,   24,   18,   28,   86,   30,   25,   18,
       19,   30,   22,   20,   22,   19,   20,   20,   21,   22,
       31,   23,   21,  244,   22,  166,   21,   23,   87,   26,

       23,   90,   21,   23,   31,   21,   26,   26,  165,   29,
       31,   31,   26,   29,   21,   92,   31,   23,   21,   29,
       41,   41,   21,   23,   87,   26,   23,   90,   21,   23,
       31,   21,   26,   26,   32,   29,   31,   31,   26,   29,
       33,   92,   32,   34,   38,   29,   32,   34,   37,   32,
       37,   33,   38,   37,   39,   39,   97,   33,   42,   42,
       32,   50,   50,   74,   74,   98,   33,  162,   32,   34,
       38,  160,   32,   34,   37,   32,   37,   33,   38,   37,
       39,   39,   97,   33,   35,   88,   35,   82,   82,   35,
       61,   98,   89,   88,   62,   89,   35,   35,  159,  159,

       81,  101,   80,   91,   61,   77,   75,   61,   61,   62,
       35,   88,   35,  102,   62,   35,   61,   91,   89,   88,
       62,   89,   35,   35,   36,   36,   96,  101,   36,   91,
       61,   36,   36,   61,   61,   62,   96,   94,   36,  102,
       62,   36,   51,   91,   94,   48,  103,   47,   46,   43,
       36,   36,   96,   17,   36,   14,   13,   36,   36,   12,
        5,    0,   96,   94,   36,    0,    0,   36,   44,   44,
       94,   44,  103,   44,   44,   44,   44,    0,   44,   44,
       44,   49,   49,   95,   49,   95,   49,   49,   49,   49,
       49,   49,   49,   49,   52,   52,  104,   52,  105,   52,

       52,   52,   52,   99,   52,   52,   52,  107,   99,   95,
       52,   95,   52,  108,   99,   64,  100,  100,   52,   64,
       52,   99,  104,  109,  105,   52,    0,    0,    0,   99,
       64,    0,    0,  107,   99,   64,   52,    0,   52,  108,
       99,   64,  100,  100,   52,   64,   52,   99,  110,  109,
       68,   52,   53,   53,   68,   53,   64,   53,   53,   53,
       53,   64,   53,   53,   53,   68,  106,  111,  106,   53,
       68,  112,  106,  116,  110,  113,   68,  114,  113,  106,
       68,  118,  114,  119,   53,  120,    0,  121,  124,   53,
        0,   68,  106,  111,  106,   53,   68,  112,  106,  116,

      125,  113,  117,  114,  113,  106,  126,  118,  114,  119,
       53,  120,  117,  121,  124,   53,   54,  117,  117,  122,
       54,  122,  123,  127,  123,  128,  125,  129,  117,  130,
       54,  132,  126,   54,   54,   54,  133,  134,  117,  135,
       54,    0,   54,  117,  117,  122,   54,  122,  123,  127,
      123,  128,  138,  129,  139,  130,   54,  132,    0,   54,
       54,   54,  133,  134,  136,  135,   54,   55,  136,  137,
      141,   55,  142,  143,  137,   55,  144,  145,  138,  140,
      139,   55,  147,  148,   55,   55,    0,  140,    0,    0,
      136,  149,  150,   55,  136,  137,  141,   55,  142,  143,

      137,   55,  144,  145,  146,  140,    0,   55,  147,  148,
       55,   55,   56,  140,   56,  146,  151,  149,  150,  151,
       56,  152,   56,  153,  154,  156,  155,   56,  157,    0,
      146,  246,   56,    0,    0,    0,  248,  249,   56,  155,
       56,  146,  151,    0,    0,  151,   56,  152,   56,  153,
      154,  156,  155,   56,  157,  161,  252,  246,   56,   57,
      167,  167,  248,  249,  253,  155,    0,   57,  172,  167,
      161,  171,  171,   57,  254,  161,   57,   57,  255,   57,
        0,  161,  252,  172,  167,   57,  257,  171,  172,  167,
      253,    0,  171,   57,  172,  167,  161,  171,  171,   57,

      254,  161,   57,   57,  255,   57,   58,  176,  176,  172,
      167,    0,  257,  171,  172,  167,  258,   58,  171,  259,
       58,  173,  176,   58,   58,    0,    0,  176,  173,  260,
        0,    0,   58,  176,  176,  175,  173,  175,  256,    0,
      256,  173,  258,   58,  262,  259,   58,  173,  176,   58,
       58,   59,  175,  176,  173,  260,  178,  175,  263,   59,
        0,  175,  173,  175,  256,   59,  256,  173,   59,   59,
      262,  178,    0,  177,    0,  264,  178,   59,  175,    0,
        0,    0,  178,  175,  263,   59,  177,  266,  177,    0,
      267,   59,  265,  177,   59,   59,   60,  178,   60,  177,

      181,  264,  178,  268,   60,   60,   60,  265,  182,    0,
      181,   60,  177,  266,  177,  181,  267,  269,  265,  177,
      181,    0,   60,  182,   60,  182,  181,    0,  182,  268,
       60,   60,   60,  265,  182,  183,  181,   60,   63,    0,
        0,  181,   63,  269,    0,  200,  181,  186,   63,  182,
      183,  182,  185,   63,  182,  183,  270,  271,   63,    0,
      200,  183,  186,  186,   63,  200,  185,  186,   63,  185,
      185,  200,    0,  186,   63,  273,  183,    0,  185,   63,
        0,  183,  270,  271,   63,   65,  200,    0,  186,  186,
      274,  200,  185,  186,  187,  185,  185,  189,  189,   65,

      275,  273,   65,   65,  187,   65,   65,    0,  276,  187,
        0,   65,    0,  189,  187,  277,  274,  278,  189,  280,
      187,    0,  188,  189,  189,   65,  275,    0,   65,   65,
      187,   65,   65,   66,  276,  187,  188,  188,   66,  189,
      187,  277,  188,  278,  189,  280,   66,   66,  188,  281,
       66,   66,  282,   66,    0,  283,  284,  285,    0,   66,
      286,    0,  188,  188,   66,    0,    0,  190,  188,  190,
        0,    0,   66,   66,    0,  281,   66,   66,  282,   66,
       67,  283,  284,  285,  190,  192,  286,  203,  287,  190,
      288,   67,  192,  190,   67,  190,  203,   67,   67,    0,

      192,    0,  203,  289,    0,  192,   67,  203,    0,  290,
      190,  192,    0,  203,  287,  190,  288,   67,  192,  193,
       67,    0,  203,   67,   67,   69,  192,   69,  203,  289,
       69,  192,  193,  203,  193,  290,  291,   69,   69,  193,
      293,    0,   69,    0,    0,  193,    0,   69,    0,    0,
        0,   69,    0,   69,    0,    0,   69,  194,  193,    0,
      193,  292,  291,   69,   69,  193,  293,  194,   69,  195,
      196,  292,  194,   69,   70,   70,  195,  194,   70,  294,
      196,   70,   70,  194,  195,  196,  296,  292,   70,  195,
      196,   70,   70,  194,    0,  195,  196,  292,  194,  297,

       70,   70,  195,  194,   70,  294,  196,   70,   70,    0,
      195,  196,  296,    0,   70,  195,  196,   70,   70,   71,
      197,    0,    0,    0,  298,  297,  299,  204,  201,  205,
      197,  204,   71,   71,   71,  197,   71,   71,    0,  201,
      197,  300,  204,  201,  205,   71,  197,  204,  201,  205,
      298,    0,  299,  204,  201,  205,  197,  204,   71,   71,
       71,  197,   71,   71,   72,  201,  197,  300,  204,  201,
      205,  301,   72,  204,  201,  205,  206,  206,   72,  209,
      210,   72,   72,    0,  302,  303,    0,    0,  305,  210,
       72,  206,  209,  306,  209,  210,  206,  301,   72,  209,

      210,  307,  206,  206,   72,  209,  210,   72,   72,   73,
      302,  303,   73,   73,  305,  210,  211,  206,  209,  306,
      209,  210,  206,  308,   73,  209,  210,  307,  212,   73,
        0,  211,  216,    0,    0,   73,  211,  309,   73,   73,
        0,  311,  211,  212,  312,  310,  213,  216,  212,  308,
       73,  313,  216,  213,  212,   73,  174,  211,  216,  174,
      174,  213,  211,  309,  310,  314,  213,  311,  315,  212,
      312,  310,  213,  216,  212,  174,  316,  313,  216,  213,
      174,    0,  174,  215,  215,  174,  174,  213,    0,  214,
      310,  314,  213,  214,  315,    0,    0,  218,  215,    0,

      317,  174,  316,  215,  217,  217,  174,  179,  214,  215,
      215,  318,  218,  214,  179,  214,    0,  218,  320,  214,
      217,  179,  179,  218,  215,  217,  317,  179,    0,  215,
      217,  217,  321,  179,  214,    0,    0,  318,  218,  214,
      179,  220,  219,  218,  320,  220,  217,  179,  179,  322,
      323,  217,    0,  179,  180,  219,    0,  219,  321,  325,
      220,  180,  219,  180,    0,  220,  326,  220,  219,  180,
      327,  220,  328,  330,  180,  322,  323,  332,  228,    0,
      180,  219,  228,  219,    0,  325,  220,  180,  219,  180,
      221,  220,  326,    0,  221,  180,  327,  228,  328,  330,

      180,  184,  228,  332,  228,  221,  184,  333,  228,  223,
      221,  223,  184,  334,  335,  184,  221,  336,  184,  184,
      221,    0,    0,  228,  223,    0,    0,  184,  228,  223,
      337,  221,  184,  333,  339,  223,  221,  223,  184,  334,
      335,  184,    0,  336,  184,  184,  191,  331,  191,  331,
      223,  224,  191,  338,  224,  223,  337,  338,  437,  191,
      339,  438,    0,  191,    0,    0,  224,    0,  191,    0,
        0,  224,  191,  331,  191,  331,    0,  224,  191,  338,
      224,  225,    0,  338,  437,  191,    0,  438,  225,  191,
      435,  227,  224,  226,  191,  198,  225,  224,  435,  439,

      440,  225,  435,  226,  227,  435,  227,  225,  226,  198,
      198,  227,  198,  226,  225,  198,  435,  227,  441,  226,
        0,  198,  225,  442,  435,  439,  440,  225,  435,  226,
      227,  435,  227,  232,  226,  198,  198,  227,  198,  226,
        0,  198,  199,  229,  441,  230,  229,  444,  232,  442,
      446,  199,  230,  232,    0,  447,  199,  199,  448,  232,
      230,  229,  199,    0,    0,  230,  229,    0,  199,  229,
        0,  230,  229,  444,  232,    0,  446,  199,  230,  232,
      235,  447,  199,  199,  448,  449,  230,  229,  199,  202,
      202,  230,  229,  233,  451,  235,  235,    0,  452,  202,

      235,  233,  453,  234,  202,  202,  235,    0,  233,  454,
      202,  449,  456,  233,  234,  202,  202,    0,  234,  233,
      451,  235,  235,  234,  452,  202,  235,  233,  453,  234,
      202,  202,  237,  237,  233,  454,  202,  207,  456,  233,
      234,  457,    0,  207,  234,  207,  238,  458,  237,  234,
      238,  461,  207,  237,  462,  240,  463,  207,  237,  237,
        0,  238,    0,  207,  464,    0,  238,  457,  240,  207,
      240,  207,  238,  458,  237,  240,  238,  461,  207,  237,
      462,  240,  463,  207,  208,    0,  208,  238,  208,    0,
      464,  239,  238,  465,  240,  469,  240,  470,  239,    0,

      241,  240,  472,  208,  474,    0,  239,  242,  208,    0,
      208,  239,  208,    0,  208,  241,  342,  239,    0,  465,
      241,  469,  242,  470,  239,  343,  241,  242,  472,  208,
      474,  342,  239,  242,  208,  222,  342,  239,  475,  344,
      343,  241,  342,  345,  222,  343,  241,  476,  242,  222,
      222,  343,  477,  242,  344,  222,    0,  342,  345,  344,
      478,  222,  342,  345,  475,  344,  343,  481,  347,  345,
      222,  343,  346,  476,  485,  222,  222,  487,  477,  346,
      344,  222,  231,  347,  345,  344,  478,  346,  347,  345,
      231,  348,  346,  481,  347,  488,  489,  231,  346,    0,

      485,  231,  231,  487,    0,  346,  348,    0,  231,  347,
        0,  348,    0,  346,  347,  349,  231,  348,  346,    0,
      479,  488,  489,  231,  490,  349,  492,  231,  231,  236,
      349,  479,  348,  236,    0,  349,  236,  348,  351,    0,
        0,  349,    0,  493,  236,  350,  479,  494,    0,  236,
      490,  349,  492,  351,  495,  236,  349,  479,  351,  236,
      350,  349,  236,  350,  351,  350,  353,  352,  353,  493,
      236,  350,  496,  494,  352,  236,    0,  499,    0,  351,
      495,  354,  352,  353,  351,  500,  350,  352,  353,  350,
      355,  350,  353,  352,  353,    0,  354,  354,  496,  501,

      352,  354,  356,  499,  357,  355,  356,  354,  352,  353,
      355,  500,    0,  352,  353,    0,  355,    0,  357,  357,
      358,  356,  354,  354,  357,  501,  356,  354,  356,  502,
      357,  355,  356,  359,  360,  358,  355,    0,  361,  503,
      358,  360,  361,  362,  357,  357,  358,  356,  359,  360,
      357,  504,  356,  359,  360,  502,  364,  361,  362,  359,
      360,  358,  361,  362,  361,  503,  358,  360,  361,  362,
      363,  364,  363,  505,  359,  360,  364,  504,    0,  359,
      360,    0,  364,  361,  362,  365,  507,  363,  361,  362,
      508,  366,  363,    0,  366,  367,  363,  364,  363,  505,

      365,    0,  364,    0,  368,  365,  367,  369,  509,  366,
      367,  365,  507,  363,  366,  367,  508,  366,  363,  368,
      366,  367,  369,    0,  368,  370,  365,  369,    0,  370,
      368,  365,  367,  369,  509,  366,  367,  371,    0,  510,
      366,  367,  513,  514,  370,  368,  373,  375,  369,  370,
      368,  370,  371,  369,  372,  370,  372,  371,    0,  515,
      373,  373,  375,  371,  376,  510,  373,  375,  513,  514,
      370,  372,  373,  375,  374,  370,  372,  516,  371,  376,
      372,  374,  372,  371,  376,  515,  373,  373,  375,  374,
      376,  377,  373,  375,  374,    0,  517,  372,  380,  377,

      374,  378,  372,  516,  518,  376,  377,  374,  378,  519,
      376,  377,    0,  380,  380,  374,  378,  377,  380,  520,
      374,  378,  517,  379,  380,  377,  379,  378,  381,    0,
      518,  381,  377,  522,  378,  519,  524,  377,  383,  380,
      380,  379,  378,  381,  380,  520,  379,  378,  381,  379,
      384,  382,  379,  383,  381,  382,  617,  381,  383,  522,
      386,    0,  524,  385,  383,  384,  382,  379,  618,  381,
      384,  382,  379,  385,  381,  386,  384,  382,  385,  383,
      386,  382,  617,  385,  383,  387,  386,  388,  389,  385,
      619,  384,  382,  621,  618,    0,  384,  382,  389,  385,

      387,  386,  388,  389,  385,  387,  386,  388,  389,  385,
        0,  387,  391,  388,  389,  622,  619,  623,  624,  621,
      390,  391,  392,  626,  389,    0,  387,  391,  388,  389,
      393,  387,  391,  388,  389,  390,  390,  392,  391,  394,
      390,  622,  392,  623,  624,  393,  390,  391,  392,  626,
      393,  396,  396,  391,  394,  627,  393,  628,  391,  394,
        0,  390,  390,  392,  630,  394,  390,  396,  392,  395,
        0,  393,  396,  395,  631,    0,  393,  396,  396,  632,
      394,  627,  397,  628,  395,  394,  397,  399,    0,  395,
      630,  633,  634,  396,  398,  395,  398,  635,  396,  395,

      631,  397,  399,  399,  401,  632,  397,  399,  397,  398,
      395,    0,  397,  399,  398,  395,  636,  633,  634,  401,
      398,  400,  398,  635,  401,    0,    0,  397,  399,  399,
      401,  402,  397,  399,  637,  398,  400,  400,  402,  403,
      398,  400,  636,    0,    0,  401,  402,  400,  638,    0,
      401,  402,  403,  405,  403,  404,  406,  402,    0,  403,
      637,    0,  400,  400,  402,  403,    0,  400,  405,  404,
      404,  406,  402,  405,  638,  404,  406,  402,  403,  405,
      403,  404,  406,    0,  407,  403,    0,  411,  407,  408,
        0,  411,  410,  640,  405,  404,  404,  406,  408,  405,

      410,  404,  406,  407,  408,  409,  411,  410,  407,  408,
      407,  411,  410,  411,  407,  408,  409,  411,  410,  640,
      409,  412,    0,  641,  408,  409,  410,  642,    0,  407,
      408,  409,  411,  410,  407,  408,  412,  411,  410,  414,
      413,  412,  409,  413,  645,    0,  409,  412,  415,  641,
        0,  409,    0,  642,  414,  413,  416,  417,  418,  414,
      413,  646,  412,  415,    0,  414,  413,  412,  415,  413,
      645,  416,  417,  418,  415,  417,  416,  417,  418,    0,
      414,  413,  416,  417,  418,  414,  413,  646,  647,  415,
      419,  421,    0,  420,  415,  648,    0,  416,  417,  418,

      420,  417,  416,  417,  418,  419,  421,  422,  420,  423,
      419,  421,    0,  420,  647,    0,  419,  421,  422,  420,
      653,  648,  422,  425,  423,    0,  420,  422,    0,  423,
        0,  419,  421,  422,  420,  423,  419,  421,  425,  420,
      654,  426,  424,  425,  422,  427,  653,  655,  422,  425,
      423,  424,  658,  422,  427,  423,  426,  424,    0,    0,
      427,  426,  424,    0,  425,  427,  654,  426,  424,  425,
      431,  427,  659,  655,  429,  660,    0,  424,  658,  431,
      427,    0,  426,  424,  429,  431,  427,  426,  424,  429,
      431,  427,  428,    0,  429,  430,  431,  661,  659,  430,

      429,  660,  428,    0,  428,  431,    0,  428,    0,  433,
      429,  431,  428,    0,  430,  429,  431,  434,  428,  430,
      429,  430,  662,  661,  433,  430,  432,  433,  428,  433,
      428,    0,  434,  428,  526,  433,  436,  434,  428,  436,
      430,  432,  432,  434,  527,  430,  432,  526,  662,  526,
      433,  436,  432,  433,  526,  433,  436,  527,  434,  527,
      526,  528,  436,  434,  527,  436,    0,  432,  432,  664,
      527,  529,  432,  526,  530,  526,  528,  436,  531,  665,
      526,  528,  436,  527,  529,  527,  529,  528,  532,  530,
      527,  529,  533,  531,  530,  664,  533,  529,  531,    0,

      530,  666,  528,  532,  531,  665,  534,  528,  532,  667,
      529,  533,  529,  668,  532,  530,  533,  529,  533,  531,
      530,  534,  533,  535,  531,  537,  534,  666,  669,  532,
        0,  535,  534,  536,  532,  667,  670,  533,  535,  668,
      537,  538,  533,  535,    0,  537,  536,  534,  536,  535,
      539,  537,  534,  536,  669,  538,  538,  535,  542,  536,
        0,  538,  670,  671,  535,  539,  537,  538,  540,  535,
      539,  537,  536,  542,  536,  540,  539,  541,  542,  536,
      544,  538,  538,  540,  542,    0,  543,  538,  540,  671,
      543,  539,  541,  541,  540,  544,  539,  541,    0,  542,

      544,  540,    0,  541,  542,  543,  544,    0,    0,  540,
      543,  545,  543,  545,  540,  673,  543,    0,  541,  541,
      546,  544,  674,  541,  546,  675,  544,  547,  545,  548,
        0,  543,    0,  545,  547,  546,  543,  545,  677,  545,
      546,  673,  547,  549,  548,    0,  546,  547,  674,  548,
      546,  675,  678,  547,  545,  548,  550,    0,  549,  545,
      547,  546,    0,  549,  677,  552,  546,  550,  547,  549,
      548,  550,  551,  547,    0,  548,  550,    0,  678,  553,
      552,  552,  550,  551,  549,  552,    0,  551,  555,  549,
      745,  552,  551,  550,  553,  556,  747,  550,  551,  553,

      554,    0,  550,  555,  554,  553,  552,  552,  555,  551,
      556,  552,  557,  551,  555,  556,  745,    0,  551,  554,
      553,  556,  747,  748,  554,  553,  554,  557,  559,  555,
      554,    0,  557,  558,  555,  749,  556,  558,  557,  559,
      560,  556,  750,  559,  752,  554,  753,  561,  559,  748,
      554,    0,  558,  557,  559,  560,  561,  558,  557,  558,
      560,  749,  561,  558,  562,  559,  560,  561,  750,  559,
      752,    0,  753,  561,  559,  756,  564,  563,  558,  562,
      565,  560,  561,  558,  562,  760,  560,  563,  561,  564,
      562,  564,  563,  561,  566,  565,  564,  563,    0,  565,

      565,  756,  564,  563,  569,  562,  565,  566,    0,  566,
      562,  760,  571,  563,  566,  564,  567,  564,  563,  569,
      566,  565,  564,  563,  569,  565,  565,  571,    0,  567,
      569,  567,  571,  566,  570,  566,  567,    0,  571,    0,
      566,  570,  567,  762,  572,  569,  573,    0,  765,  570,
      569,  768,    0,  571,  570,  567,  769,  567,  571,  572,
      570,  573,  567,  568,  572,  568,  573,  570,  771,  762,
      572,    0,  573,  574,  765,  570,  568,  768,  568,    0,
      570,  575,  769,  568,    0,  572,    0,  573,  574,  568,
      572,  568,  573,  574,  771,  577,  575,  578,  576,  574,

      772,  575,  568,  774,  568,  576,    0,  575,    0,  568,
      577,  578,  578,  576,  574,  577,    0,  578,  576,  574,
      579,  577,  575,  578,  576,  775,  772,  575,    0,  774,
      580,  576,  581,  579,  581,  579,  577,  578,  578,  576,
      579,  577,  582,  578,  576,  580,  579,  776,    0,  581,
      580,  775,  583,    0,  581,    0,  580,  582,  581,  579,
      581,  579,  582,    0,  584,  583,  579,  583,  582,    0,
        0,  580,  583,  776,  585,  581,  580,  584,  583,  584,
      581,  586,  585,  582,  584,  778,    0,    0,  582,  585,
      584,  583,  779,  583,  585,  588,  586,  587,  583,  588,

      585,  586,    0,  584,  782,  584,  784,  586,  585,  589,
      584,  778,  587,  589,  588,  585,  590,  587,  779,  588,
      585,  588,  586,  587,  590,  588,  592,  586,  589,    0,
      782,  590,  784,  589,  785,  589,  590,    0,  587,  589,
      588,  592,  590,  587,    0,  588,  592,    0,  591,    0,
      590,  786,  592,  594,  589,  594,  593,  590,  595,  589,
      785,  591,  590,  591,  593,  596,    0,  592,  591,    0,
      594,  593,  592,  595,  591,  594,  593,  786,  595,  594,
      596,  594,  593,  791,  595,  596,  844,  591,  597,  591,
      593,  596,  597,  846,  591,  598,  594,  593,    0,  595,

      851,  594,  593,  597,  595,  600,  596,  599,  597,  791,
      598,  596,  844,    0,  597,  598,  853,  599,  597,  846,
      600,  598,  599,    0,  601,  600,  851,  599,    0,  597,
      603,  600,  603,  599,  597,  854,  598,  857,    0,  601,
      602,  598,  853,  599,  601,  606,  600,  603,  599,  606,
      601,  600,  603,  599,  602,  602,  603,    0,  603,  604,
      602,  854,  860,  857,  606,  601,  602,  605,  604,  606,
      601,  606,  861,  603,  604,  606,  607,  609,  603,  604,
      602,  602,  605,  605,  862,  604,  602,  605,  860,    0,
      606,  607,  609,  605,  604,  606,  607,  609,  861,  608,

      604,  608,  607,  609,    0,  604,  610,  889,  605,  605,
      862,  891,    0,  605,  608,  611,  893,  607,  609,  608,
      895,  610,  607,  609,  612,  608,  610,  608,  613,  896,
      611,  611,  610,  889,    0,  611,  907,  891,  614,  612,
      608,  611,  893,  613,  612,  608,  895,  610,  613,    0,
      612,  680,  610,  614,  613,  896,  611,  611,  614,    0,
      681,  611,  907,  683,  614,  612,  680,  682,    0,  613,
      612,  680,  909,    0,  613,  681,  684,  680,  683,  614,
      681,    0,  682,  683,  614,  685,  681,  682,  682,  683,
        0,  684,  680,  682,  686,  686,  684,  680,  909,    0,

      685,  681,  684,  687,  683,  685,  681,    0,  682,  683,
      686,  685,  687,  682,  682,  686,    0,  684,  687,    0,
      686,  686,  684,  687,    0,  688,  685,  689,  690,  687,
        0,  685,    0,    0,    0,  688,  686,    0,  687,    0,
      688,  686,  689,  690,  687,  688,    0,  689,  690,  687,
      691,  688,  692,  689,  690,    0,    0,    0,    0,  692,
      691,  688,  693,    0,  694,  691,  688,  692,  689,  690,
      691,  688,  692,  689,  690,    0,  691,  693,  692,  694,
      695,    0,  693,    0,  694,  692,  691,    0,  693,  697,
      694,  691,  696,  692,    0,  695,  691,    0,  692,  698,

      695,  696,  699,  693,  697,  694,  695,  696,  693,  697,
      694,    0,  696,    0,  698,  697,  700,  699,  696,  698,
        0,  695,  699,    0,  704,  698,  695,  696,  699,    0,
      697,  700,  701,  696,    0,  697,  700,    0,  696,  704,
      698,    0,  700,  699,  704,  698,  701,  701,  699,  702,
      704,    0,  701,  702,    0,    0,  703,  700,  701,    0,
        0,    0,  700,  703,  702,  704,  705,    0,  705,  702,
      704,  703,  701,  701,    0,  702,  703,    0,  701,  702,
        0,  705,  703,  706,  707,  708,  705,    0,    0,  703,
      702,    0,  705,  709,  705,  702,  706,  703,  706,  707,

      708,  710,  703,  706,  707,  708,    0,  705,  709,  706,
      707,  708,  705,  709,    0,    0,  710,  711,    0,  709,
        0,  710,  706,    0,  706,  707,  708,  710,    0,  706,
      707,  708,  711,  713,  709,  712,  714,  711,    0,  709,
      713,    0,  710,  711,    0,  715,    0,  710,  713,  712,
      712,  714,  716,  713,    0,  712,  714,    0,  711,  713,
      715,  712,  714,  711,    0,  715,  713,  716,  717,    0,
        0,  715,  716,    0,  713,  712,  712,  714,  716,  713,
      718,  712,  714,  717,  718,  720,  715,  719,  717,    0,
      719,  715,    0,  716,  717,    0,    0,  721,  716,  718,

      720,    0,  719,    0,  718,  720,  718,  719,    0,  717,
      718,  720,  721,  719,  717,    0,  719,  721,    0,  722,
      723,  726,    0,  721,    0,  718,  720,    0,  719,  724,
      718,  720,    0,  719,  722,  723,  726,  725,  721,  722,
      723,  726,  724,  721,  724,  722,  723,  726,    0,  724,
      725,    0,  725,    0,  727,  724,    0,  725,  727,    0,
      722,  723,  726,  725,    0,  722,  723,  726,  724,  727,
      724,  728,  730,    0,  727,  724,  725,  729,  725,  733,
      727,  729,    0,  725,  727,    0,  728,  730,  731,  731,
        0,  728,  730,  733,  733,  727,  729,  728,  730,  733,

      727,  729,  732,  729,  731,  733,  732,  729,    0,  731,
        0,    0,  728,  730,  731,  731,  734,  728,  730,  733,
      733,  732,  729,  735,  737,  733,  732,  729,  732,  734,
      731,  734,  732,  738,    0,  731,  734,  736,  735,  737,
        0,  736,  734,  735,  737,    0,    0,  732,  738,  735,
      737,  740,  732,  738,    0,  734,  736,  734,    0,  738,
      741,  736,  734,  736,  735,  737,  740,  736,    0,  735,
      737,  740,  739,  739,  738,  741,  742,  740,    0,  738,
      741,  743,  736,    0,    0,  743,  741,  736,  739,  744,
      742,  742,  740,  739,    0,    0,  742,  740,  739,  739,

      743,  741,  742,  792,  744,  743,  741,  743,    0,  744,
        0,  743,  793,  795,  739,  744,  742,  742,  792,  739,
        0,    0,  742,  792,    0,  794,  743,  793,  795,  792,
      744,  743,  793,  795,  794,  744,    0,    0,  793,  795,
      794,  796,    0,    0,  792,  794,    0,    0,  798,  792,
      797,  794,    0,  793,  795,  796,  796,  797,  793,  795,
      794,  796,  799,  798,  799,  797,  794,  796,  798,    0,
      797,  794,    0,    0,  798,    0,  797,  800,  801,  799,
      802,  796,  796,  797,  799,    0,    0,  796,  799,  798,
      799,  797,  800,  801,  798,  802,  797,  800,  801,    0,

      802,    0,    0,  800,  801,  799,  802,    0,    0,    0,
      799,  803,  804,  803,  805,  806,  807,    0,  800,  801,
        0,  802,    0,  800,  801,    0,  802,  804,  803,  805,
      806,  807,  804,  803,  805,  806,  807,  803,  804,  803,
      805,  806,  807,    0,    0,    0,    0,    0,  808,    0,
      810,  811,  812,  804,  803,  805,  806,  807,  804,  803,
      805,  806,  807,  808,  809,  810,  811,  812,  808,    0,
      810,  811,  812,  809,  808,    0,  810,  811,  812,  809,
      813,    0,    0,    0,  809,    0,    0,  814,  815,  808,
      809,  810,  811,  812,  808,  813,  810,  811,  812,  809,

      813,  815,  814,  815,  816,  809,  813,  814,  815,    0,
      809,    0,    0,  814,  815,    0,  817,    0,    0,  816,
        0,  813,    0,  820,  816,    0,  813,  815,  814,  815,
      816,  817,  818,  814,  815,    0,  817,  819,  820,  818,
      821,  819,  817,  820,    0,  816,    0,  818,    0,  820,
      816,    0,  818,    0,    0,  821,  819,  817,  818,  822,
      821,  819,  817,  819,  820,  818,  821,  819,  823,  820,
        0,    0,    0,  818,  822,  824,    0,  827,  818,  822,
        0,  821,  819,  823,  826,  822,  821,  819,  823,  825,
      824,  825,  827,  828,  823,  824,    0,  827,  826,  826,

      822,  824,    0,  827,  826,  822,  825,    0,  828,  823,
      826,  825,    0,  828,  823,  825,  824,  825,  827,  828,
      829,  824,    0,  827,  826,  826,    0,  829,  830,  833,
      826,    0,  825,    0,  828,  829,    0,  825,  831,  828,
      829,  832,  831,  830,  833,  832,  829,    0,  830,  833,
        0,    0,    0,  829,  830,  833,    0,  831,  834,    0,
      832,  829,  831,    0,  831,  832,  829,  832,  831,  830,
      833,  832,  835,  834,  830,  833,    0,    0,  834,    0,
      836,  837,  838,  831,  834,    0,  832,  835,  831,  838,
      864,  832,  835,    0,  865,  836,  837,  838,  835,  834,

      836,  837,  838,    0,  834,  864,  836,  837,  838,  865,
      864,    0,    0,  835,  865,  838,  864,  866,  835,  867,
      865,  836,  837,  838,    0,    0,  836,  837,  838,  868,
        0,  864,  866,  870,  867,  865,  864,  866,  869,  867,
      865,  871,  869,  866,  868,  867,    0,    0,  870,  868,
        0,  872,    0,  870,    0,  868,  871,  869,  866,  870,
      867,  871,  869,  866,  869,  867,  872,  871,  869,  873,
      868,  872,    0,    0,  870,  868,  874,  872,  875,  870,
        0,    0,  871,  869,  873,  877,    0,  871,  869,  873,
        0,  874,  872,  875,  878,  873,  874,  872,  875,  876,

      877,  876,  874,  879,  875,  877,    0,  878,    0,  878,
      873,  877,    0,    0,  878,  873,  876,  874,  879,  875,
      878,  876,  874,  879,  875,  876,  877,  876,  880,  879,
      881,  877,    0,  878,    0,  878,    0,  882,  883,    0,
      878,    0,  876,  880,  879,  881,  884,  876,  880,  879,
      881,    0,  882,  883,  880,  885,  881,  882,  883,    0,
        0,  884,  887,  882,  883,  886,  884,    0,  885,  880,
      885,  881,  884,  886,  880,  885,  881,  887,  882,  883,
      886,  885,  887,  882,  883,  886,    0,  884,  887,  888,
      898,  886,  884,    0,  885,    0,  885,  899,  900,  886,

        0,  885,    0,  887,  888,  898,  886,  901,  887,  888,
      898,  886,  899,  900,  903,  888,  898,  899,  900,    0,
        0,    0,  901,  899,  900,    0,    0,  901,    0,  903,
      888,  898,  902,  901,  903,  888,  898,    0,  899,  900,
      903,  904,  906,  899,  900,  902,    0,  902,  901,    0,
        0,    0,  902,  901,  905,  903,  904,  906,  902,    0,
      903,  904,  906,    0,  912,  905,  913,  904,  906,  905,
        0,  902,    0,  902,  905,    0,    0,    0,  902,  912,
      905,  913,  904,  906,  912,    0,  913,  904,  906,  914,
      912,  905,  913,  915,    0,  905,  916,    0,    0,    0,

      905,    0,    0,  914,  914,  912,  919,  913,  915,  914,
      912,  916,  913,  915,    0,  914,  916,    0,  920,  915,
        0,  919,  916,    0,    0,    0,  919,    0,    0,  914,
      914,    0,  919,  920,  915,  914,    0,  916,  920,  915,
        0,    0,  916,    0,  920,    0,    0,  919,    0,    0,
        0,    0,  919,    0,    0,    0,    0,    0,    0,  920,
        0,    0,    0,    0,  920,  922,    0,    0,  922,  924,
        0,  924,  924,  925,    0,  925,  925,  926,    0,  926,
      926,  927,    0,  927,  927,  928,    0,  928,  928,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,

      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1836 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 2079 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 922 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 921 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(BTREE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 126:
#line 184 "flex_lexer.l"
case 127:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2843 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 922 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 922 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 921);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
