#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[914] =
    {   0,
      129,  129,    2,    2,  133,  131,    4,    4,  131,  129,
      124,  131,  124,  124,  127,  124,  124,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,  129,    0,  130,    1,  126,
      125,  127,  122,  121,  123,  129,  129,  129,  129,  112,
      129,  113,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  114,  129,  115,  116,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  117,  118,
      119,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  120,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      128,  125,   98,  129,   99,  129,  129,  100,  101,  129,
      129,  129,  129,  129,  129,  129,  129,  102,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  103,  129,
      129,  129,  129,  129,  129,  104,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  105,  129,
      129,  106,  129,  129,  129,  129,  129,  129,  129,  129,

      107,  129,  129,  108,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  109,  129,  129,  129,  129,
      110,  129,  129,  129,  129,  111,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  129,  129,  129,  129,   72,  129,   73,
      129,  129,  129,  129,   74,  129,  129,  129,  129,   75,
      129,  129,  129,   76,   77,  129,  129,  129,  129,  129,
       78,   79,   80,  129,  129,   81,  129,   82,  129,  129,
      129,  129,  129,  129,   83,  129,   84,   85,   86,  129,
       87,  129,  129,  129,  129,   88,  129,  129,  129,  129,
      129,   89,   90,  129,  129,  129,  129,  129,  129,  129,

       91,  129,  129,  129,  129,   92,   93,   94,  129,  129,
      129,  129,  129,  129,  129,   95,  129,   96,  129,   97,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,   54,   55,
      129,  129,  129,  129,  129,  129,  129,   56,  129,  129,
      129,   57,  129,  129,  129,  129,  129,  129,  129,  129,
      129,   58,  129,  129,  129,   59,   60,  129,  129,  129,
      129,   61,   62,   63,   64,  129,  129,  129,   65,   66,
      129,  129,  129,  129,  129,   67,  129,  129,  129,  129,
       68,  129,  129,  129,   69,  129,  129,  129,   70,  129,
      129,   71,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  129,   30,  129,  129,
       31,  129,   32,  129,  129,   33,   34,  129,   35,   36,
       37,  129,   38,  129,   39,   40,  129,   41,   42,  129,
      129,   43,  129,  129,   44,  129,  129,  129,   45,  129,
       46,   47,   48,  129,   49,  129,  129,  129,   50,   51,
       52,   53,  129,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       14,   15,   16,   17,   18,  129,   19,  129,   20,   21,
       22,   23,  129,   24,  129,  129,   25,   26,  129,   27,
       28,  129,  129,  129,   29,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      129,   10,  129,   11,  129,   12,  129,  129,   13,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  129,    7,

      129,    8,    9,    2,    2,    2,    2,    2,    5,    6,
        2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    6,    5,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[921] =
    {   0,
        0,    0,   65,    0,  365, 3679,  129,  131,    0,    0,
     3679,  356,  354,  341,  126,  125,  338,  122,  122,  130,
      175,  118,  168,  117,  137,  181,  118,  134,  173,  135,
      196,  218,  228,  196,  270,  312,  214,  233,  255,    0,
      161,  202,  345,  369,    0,  339,  337,  297,  382,  199,
      293,  395,  453,  504,  555,  602,  649,  291,  275,  696,
      220,  293,  387,  399,  747,  794,  845,  434,  894,  945,
      992,  455,  462,  258,  300,    0,  288, 3679, 3679,  282,
      280,  256, 3679, 3679, 3679,  139,  161,  285,  324,  193,
      261,    0,  296,  347,  395,  235,  249,  456,  387,  298,

      333,  353,  393,  400,  486,  399,  401,  440,  454,  457,
      458,  455,  493,    0,  492,  506,  497,  505,  491,  512,
      528,  556,  506,  513,  512,  523,  549,  561,  557,    0,
      562,  548,  553,  571,  569,  565,  568,  568,  591,  576,
      575,  607,  607,  600,  600,  610,  605,  604,  601,  647,
      619,  616,  619,  650,  631,  623,    0,  298,  283,  640,
      276,    0,    0,  252,  244,  681,    0,    0,    0,  683,
      698,  699,  750,  728,  765,  674,  798,  751,  817,  782,
      834, 1043,  842,  857,  876,  887,  890,  735, 1092,  917,
      908,  952,  944,  959,  973,  994, 1016,  956, 1015, 1140,

      987, 1054, 1047, 1059, 1091, 1106, 1055, 1115, 1127, 1131,
     1088, 1162, 1143, 1087, 1179, 1176, 1174, 1201, 1206, 1198,
     1183, 1228, 1230, 1239, 1240, 1262, 1267, 1235, 1272, 1269,
     1294, 1296, 1283, 1319, 1311, 1330, 1341, 1338, 1301, 1353,
     3679,  241,    0,  658,    0,  661,  660,    0,    0,  701,
      694,  708,  848,  737,  747,  782,  773,    0,  800,  802,
      863, 1344,  871,  893,  885,  909,  898,  960,    0, 1001,
     1045, 1048, 1096, 1112, 1164,    0, 1159, 1208, 1254, 1262,
     1340, 1342, 1339, 1340, 1352, 1363, 1366, 1371, 1383, 1359,
     1369,    0, 1367, 1386, 1386, 1392, 1399, 1394, 1382, 1384,

        0, 1395, 1390, 1391, 1406, 1407, 1415, 1401, 1402, 1406,
     1419, 1403, 1417, 1423, 1425,    0, 1409, 1419, 1420, 1431,
        0, 1431, 1428, 1436, 1447,    0, 1439, 1440, 1444, 1459,
     1448, 1442, 1441, 1447, 1454, 1462,    0,  188, 1466, 1470,
     1475, 1477, 1487, 1479, 1482, 1504, 1509, 1511, 1519, 1506,
     1534, 1542, 1547, 1546, 1551, 1556, 1574, 1583, 1581, 1558,
     1591, 1613, 1608, 1595, 1618, 1626, 1623, 1642, 1647, 1650,
     1651, 1655, 1674, 1658, 1689, 1679, 1703, 1698, 1707, 1711,
     1730, 1690, 1719, 1734, 1741, 1742, 1755, 1743, 1759, 1771,
     1778, 1793, 1803, 1794, 1786, 1795, 1807, 1831, 1830, 1834,

     1816, 1826, 1863, 1835, 1847, 1871, 1886, 1875, 1899, 1868,
     1887, 1898, 1911, 1900, 1923, 1927, 1910, 1939, 1948, 1952,
     1951, 1962, 1966, 1983, 1970, 2004, 2002, 2007, 2014, 2005,
     2043, 2015, 1459, 1497, 1495, 1546, 1586,    0, 1594,    0,
     1591, 1617, 1731, 1733,    0, 1776, 1850, 1881, 1962,    0,
     1993, 2006, 2006,    0,    0, 2027, 2031, 2029, 2032, 2058,
        0,    0,    0, 2059, 2046,    0, 2050,    0, 2052, 2052,
     2047, 2054, 2057, 2073,    0, 2065,    0,    0,    0, 2059,
        0, 2069, 2077, 2065, 2071,    0, 2089, 2090, 2081, 2082,
     2089,    0,    0, 2103, 2108, 2098, 2094, 2093, 2101, 2113,

        0, 2114, 2111, 2117, 2108,    0,    0, 2105, 2124, 2115,
     2110, 2131, 2113, 2127, 2131,    0, 2120,    0, 2138,    0,
     2146, 2147, 2149, 2158, 2156, 2161, 2174, 2163, 2190, 2188,
     2191, 2199, 2203, 2215, 2226, 2218, 2247, 2230, 2255, 2254,
     2263, 2231, 2240, 2271, 2287, 2290, 2299, 2315, 2292, 2302,
     2303, 2330, 2331, 2327, 2334, 2339, 2362, 2358, 2344, 2366,
     2374, 2401, 2391, 2399, 2396, 2410, 2415, 2418, 2423, 2446,
     2428, 2451, 2450, 2455, 2460, 2462, 2485, 2487, 2494, 2473,
     2483, 2516, 2521, 2537, 2535, 2534, 2544, 2553, 2530, 2539,
     2568, 2566, 2587, 2569, 2582, 2591, 2606, 2601, 2609, 2620,

     2619, 2641, 2618, 2648, 2656, 2653, 2657, 2658,    0,    0,
     2118, 2142, 2151, 2180, 2253, 2268, 2294,    0, 2285, 2348,
     2367,    0, 2368, 2417, 2431, 2478, 2517, 2581, 2610, 2645,
     2647,    0, 2657, 2649, 2648,    0,    0, 2655, 2671, 2667,
     2679,    0,    0,    0,    0, 2694, 2688, 2677,    0,    0,
     2693, 2682, 2687, 2701, 2701,    0, 2710, 2693, 2710, 2714,
     2697, 2700, 2699, 2719,    0, 2720, 2723, 2723,    0, 2710,
     2729,    0, 2733, 2738, 2742, 2745, 2747, 2755, 2752, 2756,
     2757, 2770, 2785, 2797, 2774, 2786, 2799, 2809, 2807, 2808,
     2822, 2826, 2836, 2857, 2858, 2849, 2879, 2880, 2870, 2866,

     2888, 2898, 2889, 2917, 2920, 2902, 2910, 2921, 2929, 2942,
     2951, 2950, 2932, 2959, 2961, 2969, 2973, 2972, 2990, 2983,
     3004, 3002, 3014, 3025, 3032, 3041, 3042, 3053, 3044, 3056,
     3066, 3069, 3074, 3084, 3081, 3085, 2743,    0, 2804, 2838,
     2833, 2864,    0, 3003, 2996,    0,    0, 3035,    0,    0,
        0, 3093,    0, 3087,    0,    0, 3077,    0,    0, 3093,
     3108,    0, 3102, 3117,    0, 3099, 3116, 3097,    0, 3120,
     3107,    0,    0, 3118,    0, 3130, 3132, 3114,    0,    0,
        0,    0, 3126, 3136, 3137, 3141, 3138, 3146, 3168, 3145,
     3179, 3170, 3169, 3178, 3202, 3193, 3197, 3207, 3209, 3210,

     3212, 3220, 3231, 3234, 3241, 3242, 3250, 3245, 3249, 3252,
     3283, 3264, 3282, 3273, 3274, 3281, 3306, 3311, 3292, 3313,
     3314, 3315, 3346, 3349, 3350, 3336, 3353, 3354, 3358, 3381,
        0,    0,    0,    0,    0, 3152,    0, 3165,    0,    0,
        0,    0, 3220,    0, 3304, 3322,    0,    0, 3348,    0,
        0, 3351, 3359, 3377,    0, 3385, 3386, 3397, 3398, 3402,
     3413, 3410, 3425, 3421, 3426, 3429, 3434, 3463, 3438, 3465,
     3442, 3450, 3453, 3477, 3474, 3481, 3482, 3490, 3486, 3493,
     3379,    0, 3490,    0, 3501,    0, 3495, 3506,    0, 3522,
     3525, 3529, 3526, 3534, 3530, 3533, 3558, 3557, 3535,    0,

     3524,    0,    0, 3562, 3565, 3567, 3566, 3574,    0,    0,
     3589, 3590, 3679, 3654,  188, 3658, 3662, 3666, 3670, 3674
    } ;

static yyconst flex_int16_t yy_def[921] =
    {   0,
      913,    1,  913,    3,  913,  913,  913,  913,  914,  915,
      913,  916,  913,  913,  915,  913,  913,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  917,
      917,  913,  918,  919,  917,  920,  917,  917,  919,  917,
      917,  919,  919,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  913,  914,  915,  916,  913,  913,  913,
      913,  915,  913,  913,  913,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  917,  917,  918,   53,
      920,  917,  917,  917,  917,   53,  917,  917,  917,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      913,  913,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  917,  917,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      915,  915,  915,  915,  915,  915,  915,  915,  915,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  915,  915,

      915,  915,  915,   53,   53,   53,   53,   53,  915,  915,
       53,   53,    0,  913,  913,  913,  913,  913,  913,  913
    } ;

static yyconst flex_int16_t yy_nxt[3745] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   11,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   10,
       34,   35,   36,   37,   38,   39,   10,   10,   10,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   10,   34,   35,   36,   37,
       38,   39,   10,   10,   10,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   45,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   44,   68,   69,   70,   71,   72,

       73,   44,   44,   44,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       44,   68,   69,   70,   71,   72,   73,   44,   44,   44,
       74,   74,   74,   74,   81,   82,   83,   84,   86,   91,
       87,  110,  102,   93,  103,  118,   88,  111,   89,  104,
      112,  119,  123,   90,  105,  243,  124,   94,  113,   92,
       95,   96,  158,   74,   86,   91,   87,  110,  102,   93,
      103,  118,   88,  111,   89,  104,  112,  119,  123,   90,
      105,  243,  124,   94,  113,   92,   95,   96,   97,  106,
      120,   76,   98,  244,  121,  107,   99,  338,  108,  114,

      122,  109,  100,   74,   74,  101,  115,  116,  249,  125,
      167,  168,  117,  136,   97,  106,  120,  137,   98,  244,
      121,  107,   99,  126,  108,  114,  122,  109,  100,  127,
      128,  101,  115,  116,  249,  125,  129,  160,  117,  136,
      150,  133,  151,  137,  130,  152,  153,  202,  131,  126,
      242,  132,  134,  338,  154,  127,  128,  160,  135,   74,
       74,  164,  129,  160,   81,   82,  150,  133,  151,  258,
      130,  152,  153,  202,  131,  155,  156,  132,  134,  250,
      154,  259,  162,  160,  135,  138,  337,  139,  196,  242,
      140,   80,  160,  251,   78,  258,  197,  141,  142,  158,

       74,  155,  156,  241,  169,  250,  164,  259,  160,  245,
      203,  138,  160,  139,  196,  194,  140,  246,  160,  251,
      252,  195,  197,  141,  142,  143,  144,  253,  160,  145,
      160,  266,  146,  147,  160,  245,  203,  247,  160,  148,
      248,  194,  149,  246,  163,  162,  252,  195,  157,   85,
       80,  143,  144,  253,  160,  145,  160,  266,  146,  147,
      267,   79,   78,  247,  913,  148,  248,  913,  149,  157,
      157,  254,  157,  255,  157,  157,  157,  157,  913,  157,
      157,  157,  157,  157,  268,  157,  267,  157,  157,  157,
      165,  166,  157,  157,  157,  157,  157,  254,  157,  255,

      157,  157,  157,  157,  204,  157,  157,  157,  205,  269,
      268,  170,  256,  171,  206,  270,  207,  264,  265,  172,
      208,  173,  257,  275,  160,  913,  174,  913,  913,  913,
      204,  276,  913,  913,  205,  269,  160,  170,  256,  171,
      206,  270,  207,  264,  265,  172,  208,  173,  257,  275,
      160,  220,  174,  157,  157,  221,  157,  276,  157,  157,
      157,  157,  160,  157,  157,  157,  913,  277,  237,  260,
      175,  160,  160,  913,  261,  913,  238,  220,  278,  160,
      262,  221,  239,  240,  279,  280,  281,  263,  913,  282,
      176,  913,  160,  277,  237,  260,  175,  160,  160,  160,

      261,  271,  238,  272,  278,  160,  262,  273,  239,  240,
      279,  280,  281,  263,  274,  282,  176,  177,  160,  283,
      285,  160,  286,  290,  284,  160,  291,  271,  292,  272,
      293,  178,  287,  273,  179,  180,  298,  288,  289,  299,
      274,  160,  913,  177,  300,  283,  285,  160,  286,  290,
      284,  294,  291,  295,  292,  301,  293,  178,  287,  913,
      179,  180,  298,  288,  289,  299,  913,  160,  181,  296,
      300,  297,  182,  302,  303,  304,  183,  294,  305,  295,
      306,  301,  184,  307,  308,  185,  309,  313,  314,  913,
      310,  311,  160,  913,  181,  296,  312,  297,  182,  302,

      303,  304,  183,  317,  305,  318,  306,  913,  184,  307,
      308,  185,  309,  313,  314,  315,  310,  311,  160,  160,
      319,  320,  312,  316,  321,  322,  186,  324,  187,  317,
      325,  318,  326,  188,  327,  330,  323,  331,  189,  160,
      913,  315,  913,  332,  913,  160,  319,  320,  335,  316,
      321,  322,  186,  324,  187,  336,  325,  160,  326,  188,
      327,  330,  323,  331,  189,  160,  160,  333,  328,  332,
      190,  329,  913,  913,  335,  433,  191,  160,  434,  192,
      334,  336,  193,  160,  435,  913,  160,  913,  913,  165,
      166,  160,  160,  333,  328,  913,  190,  329,  160,  339,

      160,  433,  191,  160,  434,  192,  334,  913,  193,  913,
      435,  160,  160,  160,  198,  160,  160,  160,  160,  913,
      160,  199,  200,  341,  160,  339,  160,  201,  436,  437,
      340,  342,  438,  160,  913,  160,  160,  160,  913,  160,
      198,  160,  160,  345,  160,  160,  160,  199,  200,  341,
      366,  913,  160,  201,  436,  437,  340,  342,  438,  160,
      209,  160,  160,  343,  160,  160,  344,  160,  160,  345,
      441,  160,  160,  913,  210,  350,  366,  351,  160,  442,
      211,  212,  160,  346,  160,  913,  209,  160,  160,  343,
      160,  160,  344,  160,  160,  443,  441,  347,  160,  160,

      210,  350,  160,  351,  444,  442,  211,  212,  160,  346,
      160,  160,  213,  160,  160,  160,  354,  445,  913,  160,
      214,  443,  348,  347,  215,  160,  446,  216,  160,  349,
      444,  160,  913,  913,  352,  160,  913,  160,  213,  913,
      913,  160,  354,  445,  353,  160,  214,  913,  348,  913,
      215,  160,  446,  216,  160,  349,  913,  160,  217,  160,
      352,  160,  160,  439,  913,  440,  355,  913,  913,  218,
      353,  160,  360,  361,  160,  219,  447,  160,  913,  160,
      160,  913,  160,  913,  217,  160,  450,  913,  160,  439,
      362,  440,  355,  160,  160,  218,  913,  160,  360,  361,

      160,  219,  447,  363,  160,  160,  365,  160,  160,  222,
      451,  223,  450,  160,  224,  913,  362,  452,  364,  160,
      160,  225,  226,  453,  160,  160,  454,  160,  913,  363,
      160,  160,  365,  160,  160,  222,  451,  223,  372,  160,
      224,  371,  913,  452,  364,  160,  913,  225,  226,  453,
      160,  160,  454,  160,  160,  913,  913,  160,  227,  228,
      160,  160,  229,  913,  372,  230,  231,  371,  374,  160,
      913,  160,  232,  160,  913,  233,  160,  455,  913,  373,
      160,  160,  160,  913,  227,  228,  375,  160,  229,  160,
      160,  230,  231,  160,  374,  160,  160,  913,  232,  160,

      376,  233,  160,  455,  160,  373,  913,  160,  160,  160,
      160,  160,  375,  386,  456,  160,  160,  913,  234,  160,
      235,  913,  160,  236,  160,  377,  376,  913,  378,  160,
      160,  160,  160,  160,  913,  160,  160,  160,  913,  386,
      456,  913,  379,  381,  234,  913,  235,  380,  913,  236,
      160,  377,  160,  160,  378,  160,  356,  160,  160,  160,
      160,  357,  457,  458,  160,  913,  913,  358,  379,  381,
      913,  160,  160,  380,  359,  387,  160,  389,  160,  160,
      160,  913,  356,  913,  388,  394,  160,  357,  457,  458,
      160,  160,  160,  358,  913,  913,  160,  160,  160,  913,

      359,  387,  160,  389,  160,  160,  160,  367,  160,  368,
      388,  394,  398,  369,  390,  913,  391,  160,  160,  392,
      370,  393,  160,  160,  160,  160,  913,  459,  160,  160,
      160,  160,  160,  367,  160,  368,  460,  913,  398,  369,
      390,  395,  391,  160,  160,  392,  370,  393,  160,  160,
      160,  160,  160,  459,  160,  160,  382,  160,  160,  396,
      160,  400,  460,  397,  160,  913,  383,  395,  160,  160,
      160,  384,  385,  913,  160,  399,  913,  160,  160,  160,
      160,  461,  382,  160,  462,  396,  160,  400,  913,  397,
      160,  160,  383,  160,  160,  401,  160,  384,  385,  160,

      160,  399,  409,  160,  403,  160,  160,  461,  402,  913,
      462,  160,  913,  160,  404,  160,  160,  160,  160,  160,
      160,  401,  160,  405,  407,  160,  160,  406,  409,  408,
      403,  913,  463,  913,  402,  160,  913,  160,  160,  160,
      404,  160,  160,  160,  160,  160,  160,  160,  410,  405,
      407,  913,  160,  406,  411,  408,  160,  160,  463,  417,
      913,  160,  412,  913,  160,  160,  413,  160,  464,  160,
      414,  160,  160,  160,  410,  415,  160,  160,  160,  160,
      411,  416,  160,  160,  160,  417,  420,  913,  412,  160,
      913,  160,  413,  160,  464,  465,  414,  418,  160,  160,

      160,  415,  160,  160,  160,  160,  160,  416,  419,  160,
      160,  160,  420,  160,  913,  160,  423,  913,  431,  421,
      160,  465,  913,  418,  422,  160,  160,  426,  160,  913,
      160,  160,  160,  160,  419,  160,  160,  160,  160,  160,
      424,  913,  423,  425,  431,  421,  160,  160,  160,  913,
      422,  427,  913,  426,  160,  429,  160,  160,  160,  160,
      466,  448,  160,  467,  160,  428,  424,  160,  430,  425,
      160,  468,  469,  160,  160,  160,  449,  427,  160,  470,
      471,  429,  160,  472,  160,  432,  466,  448,  473,  467,
      160,  428,  476,  160,  430,  477,  160,  468,  469,  478,

      474,  160,  449,  479,  160,  470,  471,  480,  481,  472,
      475,  432,  482,  483,  473,  484,  160,  485,  476,  486,
      487,  477,  488,  489,  490,  478,  474,  493,  491,  479,
      494,  495,  496,  480,  481,  497,  475,  498,  482,  483,
      499,  484,  500,  485,  501,  486,  487,  492,  488,  489,
      490,  502,  503,  493,  491,  504,  494,  495,  496,  505,
      506,  497,  507,  498,  508,  509,  499,  510,  500,  511,
      501,  512,  513,  492,  514,  515,  516,  502,  503,  517,
      518,  504,  520,  160,  519,  505,  506,  521,  507,  609,
      508,  509,  160,  510,  522,  511,  160,  512,  513,  160,

      514,  515,  516,  160,  160,  517,  518,  160,  520,  160,
      519,  523,  160,  521,  160,  609,  160,  913,  160,  160,
      522,  160,  160,  160,  160,  160,  160,  610,  160,  160,
      160,  524,  611,  160,  527,  526,  528,  523,  160,  529,
      160,  160,  160,  160,  525,  160,  160,  160,  160,  160,
      160,  160,  160,  610,  160,  531,  160,  524,  611,  160,
      527,  526,  528,  160,  160,  529,  530,  160,  533,  160,
      525,  160,  160,  160,  160,  539,  612,  160,  532,  160,
      534,  531,  160,  160,  160,  160,  913,  535,  160,  160,
      160,  160,  530,  160,  533,  160,  538,  160,  160,  160,

      536,  539,  612,  613,  532,  160,  534,  614,  160,  160,
      160,  160,  543,  535,  160,  537,  615,  160,  160,  160,
      160,  160,  538,  540,  160,  160,  536,  541,  160,  613,
      160,  913,  160,  614,  160,  160,  542,  160,  543,  544,
      545,  537,  615,  160,  160,  160,  160,  616,  913,  540,
      160,  160,  913,  541,  160,  160,  160,  546,  160,  160,
      160,  160,  542,  160,  160,  544,  545,  160,  549,  160,
      913,  160,  160,  616,  548,  160,  160,  913,  547,  160,
      913,  160,  551,  546,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  549,  160,  160,  913,  160,  550,

      548,  160,  913,  552,  547,  160,  160,  559,  551,  913,
      160,  160,  553,  160,  160,  160,  160,  160,  160,  555,
      160,  160,  160,  554,  160,  550,  160,  160,  160,  552,
      913,  913,  160,  559,  913,  160,  560,  160,  553,  556,
      160,  160,  160,  557,  160,  555,  160,  160,  160,  554,
      160,  561,  160,  160,  160,  913,  160,  558,  562,  160,
      160,  160,  560,  617,  618,  556,  160,  160,  563,  557,
      160,  160,  160,  160,  160,  564,  160,  561,  160,  160,
      160,  565,  160,  558,  562,  160,  160,  913,  567,  617,
      618,  566,  160,  160,  563,  160,  160,  160,  160,  568,

      619,  564,  160,  160,  160,  160,  160,  565,  160,  569,
      160,  160,  160,  571,  567,  160,  570,  566,  160,  572,
      160,  160,  160,  160,  160,  568,  619,  913,  573,  160,
      160,  160,  160,  577,  160,  569,  160,  160,  160,  571,
      160,  160,  570,  578,  160,  572,  160,  160,  160,  160,
      160,  160,  160,  160,  573,  574,  160,  160,  160,  577,
      575,  581,  913,  160,  160,  576,  160,  160,  160,  578,
      160,  160,  160,  160,  160,  582,  579,  160,  160,  160,
      160,  574,  913,  620,  160,  587,  575,  581,  160,  160,
      160,  576,  160,  160,  160,  580,  583,  160,  160,  584,

      160,  582,  579,  160,  588,  160,  160,  585,  160,  620,
      160,  587,  160,  621,  160,  160,  160,  160,  160,  586,
      913,  580,  583,  160,  160,  584,  160,  160,  160,  160,
      588,  160,  590,  585,  160,  160,  160,  160,  160,  621,
      160,  160,  160,  160,  160,  586,  589,  160,  160,  160,
      160,  592,  913,  160,  160,  591,  160,  913,  590,  913,
      160,  160,  160,  160,  160,  160,  160,  593,  596,  160,
      160,  913,  589,  160,  160,  622,  160,  592,  595,  160,
      594,  591,  160,  160,  913,  160,  160,  160,  160,  160,
      160,  160,  597,  593,  596,  160,  913,  600,  913,  160,

      160,  622,  160,  160,  595,  160,  594,  160,  623,  160,
      598,  160,  599,  160,  160,  160,  913,  601,  597,  160,
      160,  160,  160,  600,  160,  160,  160,  624,  602,  160,
      625,  160,  160,  160,  623,  608,  598,  605,  599,  160,
      603,  160,  160,  601,  160,  160,  160,  160,  160,  604,
      160,  160,  160,  624,  602,  626,  625,  160,  160,  627,
      160,  608,  628,  605,  629,  160,  603,  160,  160,  606,
      160,  630,  631,  607,  632,  604,  633,  160,  160,  634,
      160,  626,  635,  636,  637,  627,  160,  638,  628,  641,
      629,  642,  639,  643,  644,  606,  645,  630,  631,  607,

      632,  646,  633,  640,  647,  634,  160,  648,  635,  636,
      637,  649,  650,  638,  651,  641,  652,  642,  639,  643,
      644,  653,  645,  654,  655,  656,  657,  646,  658,  640,
      647,  659,  660,  648,  661,  662,  663,  649,  650,  664,
      651,  665,  652,  666,  667,  668,  669,  653,  670,  654,
      655,  656,  657,  671,  658,  672,  737,  659,  660,  738,
      661,  662,  663,  160,  160,  664,  160,  665,  739,  666,
      667,  668,  669,  677,  670,  160,  673,  674,  160,  671,
      160,  672,  737,  160,  160,  738,  675,  678,  676,  160,
      160,  160,  160,  160,  739,  160,  740,  913,  160,  677,

      160,  160,  673,  674,  160,  160,  160,  160,  160,  160,
      160,  160,  675,  678,  676,  679,  160,  160,  680,  160,
      160,  160,  740,  681,  160,  160,  160,  160,  160,  913,
      682,  160,  160,  160,  160,  160,  160,  160,  913,  683,
      160,  679,  160,  160,  680,  913,  160,  160,  160,  681,
      685,  160,  160,  160,  160,  160,  682,  160,  160,  684,
      686,  160,  160,  160,  160,  683,  160,  160,  160,  160,
      687,  160,  160,  160,  160,  688,  685,  160,  160,  741,
      160,  160,  913,  160,  160,  684,  686,  689,  160,  160,
      160,  160,  160,  160,  160,  742,  687,  160,  160,  690,

      160,  688,  913,  160,  160,  741,  160,  160,  160,  160,
      160,  743,  744,  689,  160,  691,  160,  160,  160,  160,
      160,  742,  913,  692,  160,  690,  160,  160,  694,  160,
      160,  693,  160,  160,  160,  160,  160,  743,  744,  160,
      160,  691,  160,  695,  160,  160,  160,  160,  160,  692,
      160,  160,  160,  160,  694,  160,  160,  693,  160,  696,
      697,  160,  160,  913,  160,  160,  160,  160,  160,  695,
      160,  160,  745,  160,  160,  160,  160,  160,  160,  160,
      700,  160,  160,  160,  746,  696,  697,  160,  699,  698,
      160,  160,  913,  160,  160,  160,  701,  160,  745,  160,

      747,  160,  160,  160,  702,  160,  700,  160,  160,  160,
      746,  160,  913,  160,  699,  698,  160,  160,  160,  913,
      703,  160,  701,  705,  913,  160,  747,  160,  160,  160,
      702,  704,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  913,  160,  748,  160,  708,  703,  160,  749,  705,
      706,  913,  160,  160,  160,  160,  913,  704,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  748,
      707,  708,  160,  160,  749,  711,  706,  160,  160,  712,
      710,  160,  709,  160,  913,  913,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  750,  707,  160,  160,  160,

      160,  711,  160,  160,  160,  712,  710,  913,  709,  160,
      160,  160,  913,  160,  160,  713,  160,  714,  160,  715,
      160,  750,  160,  160,  160,  160,  160,  913,  160,  716,
      160,  160,  913,  160,  717,  913,  160,  160,  160,  913,
      913,  713,  913,  714,  913,  715,  160,  160,  160,  751,
      160,  160,  160,  160,  160,  716,  723,  160,  160,  160,
      717,  160,  718,  913,  160,  719,  720,  160,  722,  721,
      160,  160,  160,  160,  160,  751,  160,  160,  160,  160,
      160,  160,  723,  725,  160,  160,  160,  160,  718,  724,
      160,  719,  720,  160,  722,  721,  160,  160,  160,  160,

      160,  913,  160,  160,  160,  160,  160,  160,  160,  725,
      913,  160,  160,  752,  726,  724,  160,  913,  160,  160,
      913,  728,  727,  160,  160,  160,  160,  729,  160,  160,
      160,  160,  160,  731,  160,  734,  160,  160,  160,  752,
      726,  753,  730,  160,  160,  160,  160,  728,  727,  160,
      160,  732,  160,  729,  160,  160,  160,  160,  160,  731,
      733,  734,  160,  160,  160,  160,  754,  753,  730,  160,
      160,  755,  160,  160,  736,  160,  756,  732,  160,  757,
      758,  160,  160,  160,  160,  160,  733,  759,  760,  735,
      160,  160,  754,  160,  160,  160,  160,  755,  761,  160,

      736,  160,  756,  762,  160,  757,  758,  763,  764,  765,
      766,  160,  767,  759,  760,  735,  160,  768,  769,  160,
      160,  160,  770,  771,  761,  772,  773,  774,  775,  762,
      776,  777,  778,  763,  764,  765,  766,  779,  767,  780,
      781,  782,  783,  768,  769,  913,  913,  913,  770,  771,
      160,  772,  773,  774,  775,  160,  776,  777,  778,  160,
      831,  913,  785,  779,  786,  780,  781,  782,  783,  160,
      160,  787,  160,  160,  790,  160,  160,  913,  788,  160,
      784,  160,  160,  789,  160,  160,  831,  160,  785,  160,
      786,  793,  160,  160,  160,  160,  160,  787,  160,  160,

      790,  160,  160,  160,  788,  160,  784,  160,  160,  789,
      160,  160,  791,  160,  160,  160,  160,  793,  160,  160,
      160,  792,  160,  160,  796,  797,  160,  913,  160,  160,
      832,  794,  913,  160,  160,  795,  160,  160,  791,  160,
      160,  913,  160,  160,  160,  160,  160,  792,  160,  160,
      796,  797,  160,  160,  798,  833,  832,  794,  799,  160,
      160,  795,  160,  160,  834,  160,  160,  800,  913,  160,
      160,  160,  160,  160,  160,  160,  913,  913,  801,  160,
      798,  833,  802,  160,  799,  160,  160,  160,  835,  160,
      834,  913,  160,  800,  160,  160,  160,  160,  803,  160,

      160,  160,  805,  160,  801,  160,  807,  160,  802,  160,
      804,  913,  160,  160,  835,  160,  160,  160,  913,  160,
      160,  160,  160,  160,  803,  160,  160,  160,  805,  160,
      806,  160,  807,  160,  160,  160,  804,  160,  160,  160,
      913,  160,  160,  160,  809,  160,  160,  160,  808,  160,
      913,  160,  160,  160,  160,  810,  806,  160,  160,  160,
      160,  160,  913,  160,  160,  160,  160,  160,  160,  160,
      809,  811,  160,  160,  808,  160,  160,  913,  813,  160,
      160,  810,  812,  160,  160,  160,  160,  160,  160,  816,
      160,  913,  160,  160,  160,  160,  160,  811,  160,  814,

      160,  913,  160,  815,  813,  160,  160,  160,  812,  160,
      160,  817,  160,  160,  160,  816,  160,  818,  836,  160,
      160,  160,  160,  913,  160,  814,  160,  160,  837,  815,
      820,  160,  160,  160,  819,  160,  160,  817,  821,  160,
      913,  160,  160,  818,  836,  160,  160,  160,  913,  160,
      838,  160,  913,  160,  837,  913,  820,  160,  160,  160,
      819,  160,  160,  822,  821,  160,  825,  160,  160,  160,
      160,  823,  913,  826,  824,  160,  838,  160,  160,  160,
      913,  160,  827,  160,  160,  160,  828,  160,  160,  822,
      160,  160,  825,  160,  830,  160,  160,  823,  160,  826,

      824,  160,  160,  160,  160,  160,  160,  160,  827,  160,
      839,  160,  828,  840,  841,  829,  160,  160,  160,  160,
      830,  160,  160,  842,  160,  843,  844,  160,  160,  160,
      845,  846,  160,  847,  848,  849,  839,  160,  850,  840,
      841,  829,  851,  852,  160,  853,  854,  160,  160,  842,
      855,  843,  844,  856,  160,  858,  845,  846,  160,  847,
      848,  849,  160,  160,  850,  881,  913,  857,  851,  852,
      913,  853,  854,  160,  160,  160,  855,  859,  160,  856,
      160,  858,  160,  160,  160,  160,  160,  160,  160,  160,
      913,  881,  860,  857,  861,  160,  160,  882,  913,  160,

      160,  160,  862,  859,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  863,  860,  160,
      861,  160,  160,  882,  160,  913,  864,  160,  862,  160,
      160,  160,  160,  160,  160,  883,  160,  160,  865,  160,
      160,  160,  160,  863,  160,  160,  160,  160,  160,  160,
      160,  160,  864,  160,  913,  160,  160,  160,  160,  160,
      160,  883,  868,  160,  865,  160,  160,  160,  160,  160,
      160,  866,  160,  160,  160,  160,  869,  160,  160,  160,
      867,  160,  160,  160,  160,  160,  160,  160,  868,  160,
      872,  160,  160,  160,  160,  160,  870,  866,  160,  160,

      160,  160,  869,  913,  160,  160,  867,  160,  160,  160,
      160,  873,  160,  160,  871,  160,  872,  160,  160,  160,
      160,  874,  870,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  913,  884,  160,  160,  873,  876,  885,
      871,  913,  875,  160,  160,  160,  160,  874,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  877,
      884,  913,  878,  160,  876,  885,  160,  160,  875,  160,
      160,  160,  913,  160,  160,  160,  160,  160,  160,  160,
      886,  887,  879,  160,  888,  877,  160,  160,  878,  160,
      160,  160,  160,  160,  889,  160,  160,  160,  160,  160,

      913,  160,  160,  160,  913,  880,  886,  887,  879,  160,
      888,  899,  160,  160,  160,  160,  160,  160,  160,  160,
      889,  160,  160,  160,  160,  913,  890,  160,  160,  160,
      160,  880,  913,  913,  160,  160,  913,  899,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  890,  160,  913,  160,  160,  891,  160,  894,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  913,  160,  160,  160,  892,  160,
      160,  160,  160,  891,  160,  894,  913,  160,  160,  160,
      160,  160,  160,  160,  160,  893,  160,  160,  160,  160,

      160,  160,  160,  898,  892,  160,  160,  160,  160,  895,
      160,  160,  896,  160,  160,  897,  160,  160,  160,  160,
      160,  893,  900,  160,  160,  160,  160,  160,  160,  898,
      160,  901,  902,  160,  903,  895,  160,  160,  896,  160,
      160,  897,  160,  160,  160,  160,  160,  160,  900,  160,
      160,  160,  909,  160,  904,  910,  160,  901,  902,  160,
      903,  905,  160,  160,  906,  160,  160,  160,  160,  160,
      907,  160,  160,  160,  160,  160,  160,  160,  909,  911,
      904,  910,  160,  160,  160,  160,  908,  905,  160,  160,
      906,  160,  160,  160,  160,  160,  907,  160,  912,  160,

      160,  160,  160,  160,  160,  911,  160,  160,  160,  160,
      160,  160,  908,  913,  913,  913,  913,  160,  913,  913,
      160,  160,  913,  913,  912,  160,  160,  160,  160,  160,
      160,  913,  160,  160,  913,  913,  913,  160,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  160,  160,   75,  913,  913,   75,   77,  913,
       77,   77,  157,  913,  157,  157,  159,  913,  159,  159,
      160,  913,  160,  160,  161,  913,  161,  161,    5,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913
    } ;

static yyconst flex_int16_t yy_chk[3745] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   15,   15,   16,   16,   18,   19,
       18,   24,   22,   20,   22,   27,   18,   24,   18,   22,
       25,   28,   30,   18,   22,   86,   30,   20,   25,   19,
       20,   20,   41,   41,   18,   19,   18,   24,   22,   20,
       22,   27,   18,   24,   18,   22,   25,   28,   30,   18,
       22,   86,   30,   20,   25,   19,   20,   20,   21,   23,
       29,  915,   21,   87,   29,   23,   21,  338,   23,   26,

       29,   23,   21,   42,   42,   21,   26,   26,   90,   31,
       50,   50,   26,   34,   21,   23,   29,   34,   21,   87,
       29,   23,   21,   31,   23,   26,   29,   23,   21,   31,
       31,   21,   26,   26,   90,   31,   32,   61,   26,   34,
       37,   33,   37,   34,   32,   37,   38,   61,   32,   31,
      242,   32,   33,  165,   38,   31,   31,   61,   33,   74,
       74,  164,   32,   61,   82,   82,   37,   33,   37,   96,
       32,   37,   38,   61,   32,   39,   39,   32,   33,   91,
       38,   97,  161,   61,   33,   35,  159,   35,   59,   81,
       35,   80,   59,   91,   77,   96,   59,   35,   35,  158,

      158,   39,   39,   75,   51,   91,   48,   97,   58,   88,
       62,   35,   59,   35,   59,   58,   35,   88,   59,   91,
       93,   58,   59,   35,   35,   36,   36,   93,   58,   36,
       62,  100,   36,   36,   58,   88,   62,   89,   59,   36,
       89,   58,   36,   88,   47,   46,   93,   58,   43,   17,
       14,   36,   36,   93,   58,   36,   62,  100,   36,   36,
      101,   13,   12,   89,    5,   36,   89,    0,   36,   44,
       44,   94,   44,   94,   44,   44,   44,   44,    0,   44,
       44,   44,   49,   49,  102,   49,  101,   49,   49,   49,
       49,   49,   49,   49,   49,   52,   52,   94,   52,   94,

       52,   52,   52,   52,   63,   52,   52,   52,   63,  103,
      102,   52,   95,   52,   63,  104,   64,   99,   99,   52,
       64,   52,   95,  106,   63,    0,   52,    0,    0,    0,
       63,  107,    0,    0,   63,  103,   64,   52,   95,   52,
       63,  104,   64,   99,   99,   52,   64,   52,   95,  106,
       63,   68,   52,   53,   53,   68,   53,  107,   53,   53,
       53,   53,   64,   53,   53,   53,    0,  108,   72,   98,
       53,   68,   72,    0,   98,    0,   72,   68,  109,   73,
       98,   68,   73,   73,  110,  111,  112,   98,    0,  112,
       53,    0,   72,  108,   72,   98,   53,   68,   72,   73,

       98,  105,   72,  105,  109,   73,   98,  105,   73,   73,
      110,  111,  112,   98,  105,  112,   53,   54,   72,  113,
      115,   54,  116,  117,  113,   73,  118,  105,  119,  105,
      120,   54,  116,  105,   54,   54,  123,  116,  116,  124,
      105,   54,    0,   54,  125,  113,  115,   54,  116,  117,
      113,  121,  118,  121,  119,  126,  120,   54,  116,    0,
       54,   54,  123,  116,  116,  124,    0,   54,   55,  122,
      125,  122,   55,  127,  128,  129,   55,  121,  131,  121,
      132,  126,   55,  133,  134,   55,  135,  137,  138,    0,
      135,  136,   55,    0,   55,  122,  136,  122,   55,  127,

      128,  129,   55,  140,  131,  141,  132,    0,   55,  133,
      134,   55,  135,  137,  138,  139,  135,  136,   55,   56,
      142,  143,  136,  139,  144,  145,   56,  146,   56,  140,
      147,  141,  148,   56,  149,  151,  145,  152,   56,   56,
        0,  139,    0,  153,    0,   56,  142,  143,  155,  139,
      144,  145,   56,  146,   56,  156,  147,  160,  148,   56,
      149,  151,  145,  152,   56,   56,   57,  154,  150,  153,
       57,  150,    0,    0,  155,  244,   57,  160,  246,   57,
      154,  156,   57,  160,  247,    0,   57,    0,    0,  166,
      166,  176,   57,  154,  150,    0,   57,  150,  166,  170,

      170,  244,   57,  160,  246,   57,  154,    0,   57,    0,
      247,  176,   57,   60,   60,  171,  172,  176,  166,    0,
      170,   60,   60,  172,  166,  170,  170,   60,  250,  251,
      171,  172,  252,   60,    0,  171,  172,  176,    0,   60,
       60,  171,  172,  174,  166,  174,  170,   60,   60,  172,
      188,    0,  188,   60,  250,  251,  171,  172,  252,   60,
       65,  171,  172,  173,   65,  174,  173,  173,  178,  174,
      254,  174,  188,    0,   65,  178,  188,  178,  188,  255,
       65,   65,  175,  175,   65,    0,   65,  173,  178,  173,
       65,  174,  173,  173,  178,  256,  254,  175,  188,  180,

       65,  178,  175,  178,  257,  255,   65,   65,  175,  175,
       65,   66,   66,  173,  178,  177,  180,  259,    0,  180,
       66,  256,  177,  175,   66,  180,  260,   66,  175,  177,
      257,   66,    0,    0,  179,  177,    0,   66,   66,    0,
        0,  177,  180,  259,  179,  180,   66,    0,  177,    0,
       66,  181,  260,   66,  179,  177,    0,   66,   67,  183,
      179,  177,   67,  253,    0,  253,  181,    0,    0,   67,
      179,  181,  183,  183,  184,   67,  261,  181,    0,  183,
      179,    0,   67,    0,   67,  183,  263,    0,   67,  253,
      184,  253,  181,  185,  184,   67,    0,  181,  183,  183,

      184,   67,  261,  185,  186,  183,  187,  187,   67,   69,
      264,   69,  263,  185,   69,    0,  184,  265,  186,  185,
      184,   69,   69,  266,  186,  191,  267,  187,    0,  185,
      186,   69,  187,  187,  190,   69,  264,   69,  191,  185,
       69,  190,    0,  265,  186,  191,    0,   69,   69,  266,
      186,  191,  267,  187,  190,    0,    0,   69,   70,   70,
      190,  193,   70,    0,  191,   70,   70,  190,  193,  192,
        0,  191,   70,  198,    0,   70,  194,  268,    0,  192,
      190,  193,   70,    0,   70,   70,  194,  193,   70,  192,
      195,   70,   70,  198,  193,  192,  194,    0,   70,  198,

      195,   70,  194,  268,  201,  192,    0,  193,   70,   71,
      195,  196,  194,  201,  270,  192,  195,    0,   71,  198,
       71,    0,  194,   71,  201,  196,  195,    0,  196,   71,
      201,  196,  199,  197,    0,   71,  195,  196,    0,  201,
      270,    0,  197,  199,   71,    0,   71,  197,    0,   71,
      201,  196,  199,  197,  196,   71,  182,  196,  199,  197,
      182,  182,  271,  272,  203,    0,    0,  182,  197,  199,
        0,  202,  207,  197,  182,  202,  204,  204,  199,  197,
      182,    0,  182,    0,  203,  207,  182,  182,  271,  272,
      203,  202,  207,  182,    0,    0,  204,  202,  207,    0,

      182,  202,  204,  204,  214,  211,  182,  189,  205,  189,
      203,  207,  211,  189,  205,    0,  205,  202,  207,  206,
      189,  206,  204,  206,  214,  211,    0,  273,  205,  189,
      214,  211,  208,  189,  205,  189,  274,    0,  211,  189,
      205,  208,  205,  206,  209,  206,  189,  206,  210,  206,
      214,  211,  208,  273,  205,  189,  200,  200,  208,  209,
      213,  213,  274,  210,  209,    0,  200,  208,  210,  206,
      209,  200,  200,    0,  210,  212,    0,  200,  208,  212,
      213,  275,  200,  200,  277,  209,  213,  213,    0,  210,
      209,  217,  200,  216,  210,  215,  215,  200,  200,  212,

      221,  212,  221,  200,  217,  212,  213,  275,  216,    0,
      277,  217,    0,  216,  218,  220,  215,  217,  218,  216,
      221,  215,  215,  219,  220,  212,  221,  219,  221,  220,
      217,    0,  278,    0,  216,  220,    0,  217,  218,  216,
      218,  220,  215,  219,  218,  222,  221,  223,  222,  219,
      220,    0,  228,  219,  223,  220,  224,  225,  278,  228,
        0,  220,  223,    0,  218,  222,  224,  223,  279,  219,
      225,  222,  228,  223,  222,  226,  224,  225,  228,  226,
      223,  227,  224,  225,  227,  228,  230,    0,  223,  229,
        0,  222,  224,  223,  279,  280,  225,  229,  228,  226,

      233,  226,  224,  225,  227,  226,  230,  227,  229,  229,
      227,  231,  230,  232,    0,  229,  233,    0,  239,  231,
      233,  280,    0,  229,  232,  226,  233,  235,  235,    0,
      227,  231,  230,  232,  229,  229,  234,  231,  239,  232,
      234,    0,  233,  234,  239,  231,  233,  236,  235,    0,
      232,  236,    0,  235,  235,  238,  234,  231,  237,  232,
      281,  262,  234,  282,  239,  237,  234,  236,  238,  234,
      240,  283,  284,  236,  235,  238,  262,  236,  237,  285,
      286,  238,  234,  287,  237,  240,  281,  262,  288,  282,
      240,  237,  290,  236,  238,  291,  240,  283,  284,  293,

      289,  238,  262,  294,  237,  285,  286,  295,  296,  287,
      289,  240,  297,  298,  288,  299,  240,  300,  290,  302,
      303,  291,  304,  305,  306,  293,  289,  308,  307,  294,
      309,  310,  311,  295,  296,  312,  289,  313,  297,  298,
      314,  299,  315,  300,  317,  302,  303,  307,  304,  305,
      306,  318,  319,  308,  307,  320,  309,  310,  311,  322,
      323,  312,  324,  313,  325,  327,  314,  328,  315,  328,
      317,  329,  330,  307,  331,  332,  333,  318,  319,  334,
      335,  320,  336,  339,  335,  322,  323,  340,  324,  433,
      325,  327,  341,  328,  342,  328,  344,  329,  330,  345,

      331,  332,  333,  339,  343,  334,  335,  340,  336,  339,
      335,  343,  341,  340,  342,  433,  344,    0,  341,  345,
      342,  346,  344,  350,  343,  345,  347,  434,  348,  339,
      343,  346,  435,  340,  349,  348,  349,  343,  341,  350,
      342,  346,  344,  350,  347,  345,  347,  346,  348,  350,
      343,  351,  347,  434,  348,  352,  349,  346,  435,  352,
      349,  348,  349,  354,  353,  350,  351,  346,  355,  350,
      347,  351,  347,  356,  348,  360,  436,  351,  353,  352,
      356,  352,  349,  354,  353,  352,    0,  357,  355,  354,
      353,  357,  351,  356,  355,  360,  359,  351,  359,  356,

      358,  360,  436,  437,  353,  352,  356,  439,  361,  354,
      353,  357,  364,  357,  355,  358,  441,  357,  359,  356,
      358,  360,  359,  361,  359,  363,  358,  362,  361,  437,
      362,    0,  364,  439,  361,  365,  363,  357,  364,  366,
      367,  358,  441,  366,  359,  363,  358,  442,    0,  361,
      362,  363,    0,  362,  361,  365,  362,  368,  364,  368,
      367,  365,  363,  366,  369,  366,  367,  370,  371,  366,
        0,  363,  372,  442,  370,  374,  362,    0,  369,  368,
        0,  365,  374,  368,  369,  368,  367,  370,  371,  366,
      369,  373,  372,  370,  371,  374,  376,    0,  372,  373,

      370,  374,    0,  375,  369,  368,  375,  382,  374,    0,
      369,  373,  376,  370,  371,  378,  376,  373,  372,  378,
      377,  374,  376,  377,  379,  373,  375,  382,  380,  375,
        0,    0,  375,  382,    0,  378,  383,  373,  376,  379,
      377,  378,  376,  380,  379,  378,  377,  381,  380,  377,
      379,  384,  375,  382,  380,    0,  383,  381,  385,  386,
      388,  378,  383,  443,  444,  379,  377,  381,  385,  380,
      379,  384,  387,  381,  380,  386,  389,  384,  385,  386,
      388,  387,  383,  381,  385,  386,  388,    0,  390,  443,
      444,  389,  387,  381,  385,  391,  389,  384,  387,  391,

      446,  386,  389,  395,  385,  386,  388,  387,  390,  392,
      392,  394,  396,  394,  390,  391,  393,  389,  387,  395,
      393,  391,  389,  395,  397,  391,  446,    0,  396,  395,
      392,  394,  396,  401,  390,  392,  392,  394,  396,  394,
      393,  391,  393,  402,  397,  395,  393,  399,  398,  395,
      397,  400,  404,  401,  396,  398,  392,  394,  396,  401,
      399,  404,    0,  402,  405,  400,  393,  399,  398,  402,
      397,  400,  404,  399,  398,  405,  403,  400,  404,  401,
      403,  398,    0,  447,  405,  410,  399,  404,  406,  402,
      405,  400,  408,  399,  398,  403,  406,  400,  404,  407,

      403,  405,  403,  407,  411,  410,  403,  408,  406,  447,
      405,  410,  408,  448,  406,  412,  409,  414,  408,  409,
        0,  403,  406,  407,  411,  407,  403,  417,  413,  407,
      411,  410,  414,  408,  406,  412,  409,  414,  408,  448,
      415,  412,  409,  414,  416,  409,  413,  417,  413,  407,
      411,  416,    0,  417,  413,  415,  418,    0,  414,    0,
      415,  412,  409,  414,  416,  419,  415,  418,  421,  420,
      416,    0,  413,  417,  413,  449,  418,  416,  420,  422,
      419,  415,  418,  423,    0,  419,  415,  425,  421,  420,
      416,  419,  423,  418,  421,  420,    0,  425,    0,  422,

      424,  449,  418,  423,  420,  422,  419,  425,  451,  423,
      424,  419,  424,  425,  421,  420,    0,  426,  423,  427,
      424,  426,  430,  425,  428,  422,  424,  452,  427,  423,
      453,  429,  432,  425,  451,  432,  424,  430,  424,  427,
      428,  426,  430,  426,  428,  427,  424,  426,  430,  429,
      428,  429,  432,  452,  427,  456,  453,  429,  432,  457,
      431,  432,  458,  430,  459,  427,  428,  426,  430,  431,
      428,  460,  464,  431,  465,  429,  467,  429,  432,  469,
      431,  456,  470,  471,  472,  457,  431,  473,  458,  476,
      459,  480,  474,  482,  483,  431,  484,  460,  464,  431,

      465,  485,  467,  474,  487,  469,  431,  488,  470,  471,
      472,  489,  490,  473,  491,  476,  494,  480,  474,  482,
      483,  495,  484,  496,  497,  498,  499,  485,  500,  474,
      487,  502,  503,  488,  504,  505,  508,  489,  490,  509,
      491,  510,  494,  511,  512,  513,  514,  495,  515,  496,
      497,  498,  499,  517,  500,  519,  611,  502,  503,  612,
      504,  505,  508,  521,  522,  509,  523,  510,  613,  511,
      512,  513,  514,  525,  515,  524,  521,  522,  526,  517,
      528,  519,  611,  521,  522,  612,  523,  527,  524,  521,
      522,  527,  523,  525,  613,  524,  614,    0,  526,  525,

      528,  524,  521,  522,  526,  530,  528,  529,  531,  521,
      522,  527,  523,  527,  524,  529,  532,  527,  530,  525,
      533,  524,  614,  531,  526,  530,  528,  529,  531,    0,
      532,  530,  534,  529,  531,  536,  532,  527,    0,  534,
      533,  529,  532,  535,  530,    0,  533,  538,  542,  531,
      536,  530,  534,  529,  531,  536,  532,  543,  534,  535,
      537,  536,  532,  535,  537,  534,  533,  538,  542,  535,
      539,  540,  539,  538,  542,  540,  536,  543,  534,  615,
      541,  536,    0,  543,  537,  535,  537,  541,  544,  535,
      537,  540,  539,  538,  542,  616,  539,  540,  539,  544,

      541,  540,    0,  543,  545,  615,  541,  546,  544,  549,
      537,  617,  619,  541,  544,  545,  547,  540,  539,  550,
      551,  616,    0,  546,  545,  544,  541,  546,  548,  549,
      545,  547,  548,  546,  544,  549,  547,  617,  619,  550,
      551,  545,  547,  552,  554,  550,  551,  552,  553,  546,
      545,  555,  548,  546,  548,  549,  556,  547,  548,  553,
      555,  559,  547,    0,  554,  550,  551,  552,  553,  552,
      554,  555,  620,  552,  553,  558,  556,  555,  548,  557,
      559,  559,  556,  560,  621,  553,  555,  559,  558,  557,
      554,  561,    0,  552,  553,  558,  560,  555,  620,  557,

      623,  558,  556,  560,  561,  557,  559,  559,  563,  560,
      621,  561,    0,  565,  558,  557,  564,  561,  562,    0,
      562,  558,  560,  564,    0,  557,  623,  566,  563,  560,
      561,  562,  567,  565,  563,  568,  564,  561,  562,  565,
      569,    0,  564,  624,  562,  571,  562,  566,  625,  564,
      568,    0,  567,  566,  563,  568,    0,  562,  567,  565,
      569,  568,  564,  570,  562,  571,  569,  573,  572,  624,
      570,  571,  574,  566,  625,  575,  568,  575,  567,  576,
      573,  568,  572,  570,    0,    0,  569,  573,  572,  570,
      580,  571,  574,  573,  572,  626,  570,  575,  574,  576,

      581,  575,  577,  575,  578,  576,  573,    0,  572,  570,
      580,  579,    0,  573,  572,  577,  580,  578,  574,  579,
      581,  626,  577,  575,  578,  576,  581,    0,  577,  582,
      578,  579,    0,  582,  583,    0,  580,  579,  583,    0,
        0,  577,    0,  578,    0,  579,  581,  589,  577,  627,
      578,  586,  585,  582,  584,  582,  590,  579,  583,  582,
      583,  587,  584,    0,  583,  585,  586,  589,  588,  587,
      588,  586,  585,  589,  584,  627,  590,  586,  585,  582,
      584,  587,  590,  592,  583,  591,  594,  587,  584,  591,
      588,  585,  586,  589,  588,  587,  588,  586,  585,  595,

      584,    0,  590,  592,  593,  591,  594,  587,  596,  592,
        0,  591,  594,  628,  593,  591,  588,    0,  598,  595,
        0,  597,  596,  597,  593,  595,  599,  598,  596,  592,
      593,  591,  594,  600,  596,  603,  601,  600,  598,  628,
      593,  629,  599,  597,  598,  595,  599,  597,  596,  597,
      593,  601,  599,  598,  596,  603,  601,  600,  602,  600,
      602,  603,  601,  600,  598,  604,  630,  629,  599,  597,
      606,  631,  599,  605,  607,  608,  633,  601,  602,  634,
      635,  603,  601,  600,  602,  604,  602,  638,  639,  605,
      606,  604,  630,  605,  607,  608,  606,  631,  640,  605,

      607,  608,  633,  641,  602,  634,  635,  646,  647,  648,
      651,  604,  652,  638,  639,  605,  606,  653,  654,  605,
      607,  608,  655,  657,  640,  658,  659,  660,  661,  641,
      662,  663,  664,  646,  647,  648,  651,  666,  652,  667,
      668,  670,  671,  653,  654,    0,    0,    0,  655,  657,
      673,  658,  659,  660,  661,  674,  662,  663,  664,  675,
      737,    0,  676,  666,  677,  667,  668,  670,  671,  679,
      673,  678,  678,  680,  681,  674,  673,    0,  679,  675,
      675,  674,  676,  680,  677,  675,  737,  682,  676,  679,
      677,  685,  678,  680,  681,  679,  673,  678,  678,  680,

      681,  674,  683,  686,  679,  675,  675,  682,  676,  680,
      677,  685,  683,  682,  684,  679,  687,  685,  678,  680,
      681,  684,  683,  686,  689,  690,  688,    0,  683,  686,
      739,  687,    0,  682,  684,  688,  687,  685,  683,  691,
      684,    0,  687,  692,  689,  690,  688,  684,  683,  686,
      689,  690,  688,  693,  691,  740,  739,  687,  692,  691,
      684,  688,  687,  692,  741,  691,  696,  693,    0,  692,
      689,  690,  688,  693,  694,  695,    0,    0,  694,  693,
      691,  740,  695,  700,  692,  691,  696,  699,  742,  692,
      741,    0,  696,  693,  694,  695,  697,  698,  697,  693,

      694,  695,  699,  700,  694,  701,  703,  699,  695,  700,
      698,    0,  696,  699,  742,  702,  697,  698,    0,  706,
      694,  695,  697,  698,  697,  701,  703,  707,  699,  700,
      702,  701,  703,  699,  704,  702,  698,  705,  708,  706,
        0,  702,  697,  698,  705,  706,  709,  707,  704,  713,
        0,  701,  703,  707,  704,  710,  702,  705,  708,  710,
      704,  702,    0,  705,  708,  706,  709,  712,  711,  713,
      705,  711,  709,  707,  704,  713,  714,    0,  715,  710,
      704,  710,  712,  705,  708,  710,  716,  712,  711,  718,
      717,    0,  709,  712,  711,  713,  714,  711,  715,  716,

      720,    0,  714,  717,  715,  710,  716,  719,  712,  718,
      717,  719,  716,  712,  711,  718,  717,  721,  744,  722,
      720,  721,  714,    0,  715,  716,  720,  719,  745,  717,
      723,  723,  716,  719,  722,  718,  717,  719,  724,  722,
        0,  721,  724,  721,  744,  722,  720,  721,    0,  725,
      748,  723,    0,  719,  745,    0,  723,  723,  726,  727,
      722,  729,  724,  725,  724,  722,  728,  721,  724,  725,
      728,  726,    0,  730,  727,  725,  748,  723,  726,  727,
        0,  729,  731,  731,  726,  727,  732,  729,  724,  725,
      728,  733,  728,  730,  735,  725,  728,  726,  735,  730,

      727,  734,  736,  731,  726,  727,  732,  729,  731,  731,
      752,  733,  732,  754,  757,  734,  728,  733,  735,  730,
      735,  734,  736,  760,  735,  761,  763,  734,  736,  731,
      764,  766,  732,  767,  768,  770,  752,  733,  771,  754,
      757,  734,  774,  776,  735,  777,  778,  734,  736,  760,
      783,  761,  763,  784,  785,  787,  764,  766,  786,  767,
      768,  770,  790,  788,  771,  836,    0,  786,  774,  776,
        0,  777,  778,  784,  785,  787,  783,  788,  786,  784,
      785,  787,  790,  788,  786,  789,  793,  792,  790,  788,
        0,  836,  789,  786,  791,  794,  791,  838,    0,  784,

      785,  787,  792,  788,  786,  789,  793,  792,  790,  788,
      796,  789,  793,  792,  797,  794,  791,  795,  789,  795,
      791,  794,  791,  838,  798,    0,  799,  800,  792,  801,
      796,  789,  793,  792,  797,  843,  796,  802,  801,  795,
      797,  794,  791,  795,  798,  795,  799,  800,  803,  801,
      798,  804,  799,  800,    0,  801,  796,  802,  805,  806,
      797,  843,  808,  802,  801,  795,  809,  807,  803,  810,
      798,  804,  799,  800,  803,  801,  810,  804,  805,  806,
      807,  812,  808,  802,  805,  806,  809,  807,  808,  810,
      814,  815,  809,  807,  803,  810,  811,  804,  816,  813,

      811,  812,  810,    0,  805,  806,  807,  812,  808,  819,
      814,  815,  809,  807,  813,  810,  814,  815,  816,  813,
      811,  817,  811,  817,  816,  813,  811,  812,  818,  819,
      820,  821,  822,    0,  845,  819,  814,  815,  821,  846,
      813,    0,  818,  817,  816,  813,  811,  817,  818,  817,
      820,  821,  822,  826,  818,  819,  820,  821,  822,  823,
      845,    0,  824,  823,  821,  846,  824,  825,  818,  817,
      827,  828,    0,  826,  818,  829,  820,  821,  822,  826,
      849,  852,  825,  823,  853,  823,  824,  825,  824,  823,
      827,  828,  824,  825,  854,  829,  827,  828,  830,  826,

        0,  829,  856,  857,    0,  830,  849,  852,  825,  823,
      853,  881,  824,  825,  858,  859,  827,  828,  830,  860,
      854,  829,  856,  857,  830,    0,  861,  862,  856,  857,
      861,  830,    0,    0,  858,  859,    0,  881,  864,  860,
      858,  859,  863,  865,  830,  860,  866,  862,  856,  857,
      861,  867,  861,  862,    0,  869,  861,  863,  864,  871,
      858,  859,  863,  865,  864,  860,  866,  872,  863,  865,
      873,  867,  866,  862,    0,  869,  861,  867,  868,  871,
      868,  869,  870,  863,  864,  871,    0,  872,  863,  865,
      873,  875,  866,  872,  874,  870,  873,  867,  876,  877,

      868,  869,  870,  879,  868,  871,  868,  878,  870,  874,
      880,  875,  877,  872,  874,  878,  873,  875,  876,  877,
      874,  870,  883,  879,  876,  877,  868,  878,  870,  879,
      880,  885,  887,  878,  888,  874,  880,  875,  877,  890,
      874,  878,  891,  893,  876,  877,  892,  895,  883,  879,
      896,  894,  899,  878,  890,  901,  880,  885,  887,  890,
      888,  892,  891,  893,  894,  890,  892,  895,  891,  893,
      896,  894,  892,  895,  898,  897,  896,  894,  899,  904,
      890,  901,  905,  907,  906,  890,  897,  892,  891,  893,
      894,  908,  892,  895,  898,  897,  896,  894,  906,  904,

      898,  897,  905,  907,  906,  904,  911,  912,  905,  907,
      906,  908,  897,    0,    0,    0,    0,  908,    0,    0,
      898,  897,    0,    0,  906,  904,  911,  912,  905,  907,
      906,    0,  911,  912,    0,    0,    0,  908,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  911,  912,  914,    0,    0,  914,  916,    0,
      916,  916,  917,    0,  917,  917,  918,    0,  918,  918,
      919,    0,  919,  919,  920,    0,  920,  920,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1589 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1832 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 914 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 913 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 125:
#line 183 "flex_lexer.l"
case 126:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2591 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 914 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 914 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 913);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 213 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
